{"version":3,"file":"20230623-306-c5bf7c2a310e64791c30.js","mappings":"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","sources":["webpack://care-ops-frontend/./src/js/entities-service/entities/actions.js","webpack://care-ops-frontend/./src/js/entities-service/actions.js","webpack://care-ops-frontend/./src/js/entities-service/entities/clinicians.js","webpack://care-ops-frontend/./src/js/entities-service/entities/comments.js","webpack://care-ops-frontend/./src/js/entities-service/clinicians.js","webpack://care-ops-frontend/./src/js/entities-service/entities/dashboards.js","webpack://care-ops-frontend/./src/js/entities-service/comments.js","webpack://care-ops-frontend/./src/js/entities-service/entities/directories.js","webpack://care-ops-frontend/./src/js/entities-service/dashboards.js","webpack://care-ops-frontend/./src/js/entities-service/entities/events.js","webpack://care-ops-frontend/./src/js/entities-service/directories.js","webpack://care-ops-frontend/./src/js/entities-service/entities/files.js","webpack://care-ops-frontend/./src/js/entities-service/events.js","webpack://care-ops-frontend/./src/js/entities-service/files.js","webpack://care-ops-frontend/./src/js/entities-service/entities/flows.js","webpack://care-ops-frontend/./src/js/entities-service/flows.js","webpack://care-ops-frontend/./src/js/entities-service/entities/form-responses.js","webpack://care-ops-frontend/./src/js/entities-service/form-responses.js","webpack://care-ops-frontend/./src/js/entities-service/entities/patient-fields.js","webpack://care-ops-frontend/./src/js/entities-service/entities/patients.js","webpack://care-ops-frontend/./src/js/entities-service/patient-fields.js","webpack://care-ops-frontend/./src/js/entities-service/entities/patient-search-results.js","webpack://care-ops-frontend/./src/js/entities-service/patients.js","webpack://care-ops-frontend/./src/js/entities-service/patient-search-results.js","webpack://care-ops-frontend/./src/js/entities-service/entities/program-actions.js","webpack://care-ops-frontend/./src/js/entities-service/entities/program-flows.js","webpack://care-ops-frontend/./src/js/entities-service/program-actions.js","webpack://care-ops-frontend/./src/js/entities-service/entities/programs.js","webpack://care-ops-frontend/./src/js/entities-service/program-flows.js","webpack://care-ops-frontend/./src/js/entities-service/entities/roles.js","webpack://care-ops-frontend/./src/js/entities-service/programs.js","webpack://care-ops-frontend/./src/js/entities-service/entities/settings.js","webpack://care-ops-frontend/./src/js/entities-service/roles.js","webpack://care-ops-frontend/./src/js/entities-service/entities/states.js","webpack://care-ops-frontend/./src/js/entities-service/settings.js","webpack://care-ops-frontend/./src/js/entities-service/entities/tags.js","webpack://care-ops-frontend/./src/js/entities-service/states.js","webpack://care-ops-frontend/./src/js/entities-service/tags.js","webpack://care-ops-frontend/./src/js/entities-service/entities/teams.js","webpack://care-ops-frontend/./src/js/entities-service/entities/widgets.js","webpack://care-ops-frontend/./src/js/entities-service/teams.js","webpack://care-ops-frontend/./src/js/entities-service/entities/workspaces.js","webpack://care-ops-frontend/./src/js/entities-service/widgets.js","webpack://care-ops-frontend/./src/js/entities-service/workspaces.js","webpack://care-ops-frontend/./src/js/static.js","webpack://care-ops-frontend/./src/js/utils/sorting.js"],"sourcesContent":["import Backbone from 'backbone';\nimport { contains, extend, keys, reduce, size } from 'underscore';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport dayjs from 'dayjs';\n\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\nimport JsonApiMixin from 'js/base/jsonapi-mixin';\n\nimport { alphaSort } from 'js/utils/sorting';\nimport trim from 'js/utils/formatting/trim';\n\nimport { ACTION_OUTREACH, ACTION_SHARING } from 'js/static';\n\nconst TYPE = 'patient-actions';\nconst { parseRelationship } = JsonApiMixin;\n\nconst _parseRelationship = function(relationship, key) {\n  if (!relationship || key === 'owner') return relationship;\n\n  return parseRelationship(relationship, key);\n};\n\nconst _Model = BaseModel.extend({\n  urlRoot() {\n    if (this.isNew()) {\n      const flow = this.get('_flow');\n      return flow ?\n        `/api/flows/${ flow }/relationships/actions` :\n        `/api/patients/${ this.get('_patient') }/relationships/actions`;\n    }\n\n    return '/api/actions';\n  },\n  type: TYPE,\n  validate({ name }) {\n    if (!trim(name)) return 'Action name required';\n  },\n  hasTag(tagName) {\n    return contains(this.get('tags'), tagName);\n  },\n  getForm() {\n    const formId = this.get('_form');\n    if (!formId) return;\n    return Radio.request('entities', 'forms:model', formId);\n  },\n  getFormResponses() {\n    return Radio.request('entities', 'formResponses:collection', this.get('_form_responses'), {\n      comparator(responseA, responseB) {\n        return alphaSort('desc', responseA.get('_created_at'), responseB.get('_created_at'));\n      },\n    });\n  },\n  getPatient() {\n    return Radio.request('entities', 'patients:model', this.get('_patient'));\n  },\n  getOwner() {\n    const owner = this.get('_owner');\n    return Radio.request('entities', `${ owner.type }:model`, owner.id);\n  },\n  getFlow() {\n    if (!this.get('_flow')) return;\n\n    return Radio.request('entities', 'flows:model', this.get('_flow'));\n  },\n  getState() {\n    return Radio.request('entities', 'states:model', this.get('_state'));\n  },\n  getPreviousState() {\n    return Radio.request('entities', 'states:model', this.previous('_state'));\n  },\n  isLocked() {\n    return !!this.get('locked_at');\n  },\n  isDone() {\n    const state = this.getState();\n    return state.isDone();\n  },\n  isOverdue() {\n    if (this.isDone()) return false;\n\n    const date = this.get('due_date');\n    const time = this.get('due_time');\n\n    if (!time) return dayjs(date).isBefore(dayjs(), 'day');\n\n    const dueDateTime = dayjs(`${ date } ${ time }`);\n\n    return dueDateTime.isBefore(dayjs(), 'day') || dueDateTime.isBefore(dayjs(), 'minute');\n  },\n  isAdHoc() {\n    return !this.get('_program_action') && !this.get('_flow');\n  },\n  hasOutreach() {\n    return this.get('outreach') !== ACTION_OUTREACH.DISABLED;\n  },\n  hasSharing() {\n    return this.get('sharing') !== ACTION_SHARING.DISABLED;\n  },\n  canEdit() {\n    const currentUser = Radio.request('bootstrap', 'currentUser');\n\n    if (currentUser.can('work:manage')) return true;\n\n    if (currentUser.can('work:owned:manage') && this.getOwner() === currentUser) return true;\n\n    return false;\n  },\n  saveDueDate(date) {\n    if (!date) {\n      return this.save({ due_date: null, due_time: null });\n    }\n    return this.save({ due_date: date.format('YYYY-MM-DD') });\n  },\n  saveDueTime(time) {\n    if (!time) {\n      return this.save({ due_time: null });\n    }\n    return this.save({ due_time: time });\n  },\n  saveState(state) {\n    const saveOpts = { _state: state.id };\n    const sharing = this.get('sharing');\n\n    if (state.isDone() && ![ACTION_SHARING.DISABLED, ACTION_SHARING.RESPONDED].includes(sharing)) {\n      saveOpts.sharing = ACTION_SHARING.CANCELED;\n    }\n\n    return this.save(saveOpts, {\n      relationships: {\n        state: this.toRelation(state),\n      },\n    });\n  },\n  saveOwner(owner) {\n    return this.save({ _owner: owner }, {\n      relationships: {\n        owner: this.toRelation(owner),\n      },\n    });\n  },\n  saveAll(attrs) {\n    if (this.isNew()) attrs = extend({}, this.attributes, attrs);\n\n    const relationships = {\n      'flow': this.toRelation(attrs._flow, 'flows'),\n      'form': this.toRelation(attrs._form, 'forms'),\n      'owner': this.toRelation(attrs._owner),\n      'state': this.toRelation(attrs._state, 'states'),\n      'program-action': this.toRelation(attrs._program_action, 'program-actions'),\n    };\n\n    return this.save(attrs, { relationships }, { wait: true });\n  },\n  hasAttachments() {\n    return !!size(this.get('_files'));\n  },\n  hasAllowedUploads() {\n    if (!this.canEdit()) return false;\n\n    const programAction = Radio.request('entities', 'programActions:model', this.get('_program_action'));\n\n    return !!size(programAction.get('allowed_uploads'));\n  },\n  parseRelationship: _parseRelationship,\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/actions',\n  model: Model,\n  parseRelationship: _parseRelationship,\n  save(attrs) {\n    const saves = this.invoke('saveAll', attrs);\n\n    return Promise.all(saves);\n  },\n  groupByDate() {\n    const groupedCollection = this.groupBy('due_date');\n\n    return reduce(keys(groupedCollection), (collection, key) => {\n      collection.add({\n        date: key,\n        actions: new Collection(groupedCollection[key]),\n      });\n\n      return collection;\n    }, new Backbone.Collection([]));\n  },\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/actions';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'actions:model': 'getModel',\n    'actions:collection': 'getCollection',\n    'fetch:actions:model': 'fetchAction',\n    'fetch:actions:collection': 'fetchActions',\n    'fetch:actions:collection:byPatient': 'fetchActionsByPatient',\n    'fetch:actions:collection:byFlow': 'fetchActionsByFlow',\n  },\n  fetchAction(id) {\n    const include = [\n      'program-action.program',\n      'flow.program-flow.program',\n    ].join();\n    return this.fetchModel(id, { data: { include } });\n  },\n  fetchActions({ filter, include }) {\n    const data = { filter, include };\n\n    return this.fetchCollection({ data });\n  },\n  fetchActionsByPatient({ patientId, filter }) {\n    const data = { filter };\n    const url = `/api/patients/${ patientId }/relationships/actions`;\n\n    return this.fetchCollection({ url, data });\n  },\n  fetchActionsByFlow(flowId) {\n    const url = `/api/flows/${ flowId }/relationships/actions`;\n\n    return this.fetchCollection({ url });\n  },\n});\n\nexport default new Entity();\n","import { first, last, reject, size, union, extend, includes } from 'underscore';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\nimport { NIL as NIL_UUID } from 'uuid';\n\nimport intl from 'js/i18n';\nimport trim from 'js/utils/formatting/trim';\n\nconst TYPE = 'clinicians';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/clinicians',\n  preinitialize() {\n    this.on('change:_team', this.onChangeTeam);\n  },\n  validate(attrs) {\n    if (!trim(attrs.name)) {\n      return 'A clinician name is required';\n    }\n\n    if (!trim(attrs.email)) {\n      return 'A clinician email address is required';\n    }\n\n    if (!attrs._role) {\n      return 'A clinician role is required';\n    }\n  },\n  onChangeTeam() {\n    const previousTeam = Radio.request('entities', 'teams:model', this.previous('_team'));\n    previousTeam.set('_clinicians', reject(previousTeam.get('_clinicians'), { id: this.id }));\n\n    const team = Radio.request('entities', 'teams:model', this.get('_team'));\n    team.set('_clinicians', union(team.get('_clinicians'), [{ id: this.id }]));\n  },\n  getWorkspaces() {\n    return Radio.request('entities', 'workspaces:collection', this.get('_workspaces'));\n  },\n  addWorkspace(workspace) {\n    const workspaces = this.getWorkspaces();\n    workspaces.add(workspace);\n    this.set('_workspaces', this.toRelation(workspaces, 'workspaces').data);\n  },\n  removeWorkspace(workspace) {\n    const workspaces = this.getWorkspaces();\n    workspaces.remove(workspace);\n    this.set('_workspaces', this.toRelation(workspaces, 'workspaces').data);\n  },\n  getTeam() {\n    if (!this.hasTeam()) {\n      return Radio.request('entities', 'teams:model', {\n        name: intl.patients.sidebar.action.activityViews.systemTeam,\n      });\n    }\n\n    return Radio.request('entities', 'teams:model', this.get('_team'));\n  },\n  hasTeam() {\n    const team = this.get('_team');\n\n    return team && team !== NIL_UUID;\n  },\n  getRole() {\n    return Radio.request('entities', 'roles:model', this.get('_role'));\n  },\n  can(prop) {\n    const role = this.getRole();\n    const permissions = role.get('permissions');\n    return includes(permissions, prop);\n  },\n  saveRole(role) {\n    return this.save({ _role: role.id }, {\n      relationships: {\n        role: this.toRelation(role),\n      },\n    });\n  },\n  saveTeam(team) {\n    return this.save({ _team: team.id }, {\n      relationships: {\n        team: this.toRelation(team),\n      },\n    });\n  },\n  saveAll(attrs) {\n    attrs = extend({}, this.attributes, attrs);\n\n    const relationships = {\n      'workspaces': this.toRelation(attrs._workspaces, 'workspaces'),\n      'team': this.toRelation(attrs._team, 'teams'),\n      'role': this.toRelation(attrs._role, 'roles'),\n    };\n\n    return this.save(attrs, { relationships }, { wait: true });\n  },\n  getInitials() {\n    const names = String(this.get('name')).split(' ');\n\n    if (names.length === 1) return first(names).charAt(0);\n\n    return `${ first(names).charAt(0) }${ last(names).charAt(0) }`;\n  },\n  isEditable() {\n    return !this.get('last_active_at');\n  },\n  isActive() {\n    const hasTeam = this.hasTeam();\n    const hasWorkspaces = !!size(this.get('_workspaces'));\n    const lastActive = this.get('last_active_at');\n\n    return hasTeam && hasWorkspaces && lastActive;\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/clinicians',\n  model: Model,\n  comparator: 'name',\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nimport trim from 'js/utils/formatting/trim';\n\nconst TYPE = 'comments';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot() {\n    if (this.isNew()) return `/api/actions/${ this.get('_action') }/relationships/comments`;\n\n    return '/api/comments';\n  },\n  validate({ message }) {\n    if (!trim(message)) return 'Comment message required.';\n  },\n  getClinician() {\n    return Radio.request('entities', 'clinicians:model', this.get('_clinician'));\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import { setUser } from 'js/datadog';\nimport BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/clinicians';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'clinicians:model': 'getModel',\n    'clinicians:collection': 'getCollection',\n    'fetch:clinicians:collection': 'fetchCollection',\n    'fetch:clinicians:current': 'fetchCurrentClinician',\n    'fetch:clinicians:model': 'fetchModel',\n    'fetch:clinicians:byWorkspace': 'fetchByWorkspace',\n  },\n  fetchCurrentClinician() {\n    return this.fetchBy('/api/clinicians/me')\n      .then(currentUser => {\n        setUser(currentUser.pick('id', 'name', 'email'));\n        return currentUser;\n      });\n  },\n  fetchByWorkspace(workspaceId) {\n    const url = `/api/workspaces/${ workspaceId }/relationships/clinicians`;\n\n    return this.fetchCollection({ url });\n  },\n});\n\nexport default new Entity();\n","import Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'dashboards';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/dashboards',\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/dashboards',\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/comments';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'comments:model': 'getModel',\n    'fetch:comments:collection:byAction': 'fetchCommentsByAction',\n  },\n  fetchCommentsByAction(actionId) {\n    const url = `/api/actions/${ actionId }/relationships/comments`;\n\n    return this.fetchCollection({ url });\n  },\n});\n\nexport default new Entity();\n","import { map } from 'underscore';\n\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'directories';\n\nconst Model = BaseModel.extend({\n  type: TYPE,\n  url() {\n    return `/api/directory/${ this.get('slug') }`;\n  },\n  getOptions() {\n    if (this.options) return this.options;\n\n    const options = map(this.get('value'), value => {\n      return {\n        name: value,\n        id: value,\n      };\n    });\n\n    this.options = new BaseCollection(options);\n\n    return this.options;\n  },\n});\n\nconst Collection = BaseCollection.extend({\n  url: '/api/directories',\n  model: Model,\n});\n\nexport {\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/dashboards';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'dashboards:model': 'getModel',\n    'dashboards:collection': 'getCollection',\n    'fetch:dashboards:model': 'fetchModel',\n    'fetch:dashboards:collection': 'fetchCollection',\n  },\n});\n\nexport default new Entity();\n","import Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'events';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n\n  getClinician() {\n    return Radio.request('entities', 'clinicians:model', this.get('_clinician'));\n  },\n  getRecipient() {\n    if (!this.get('_recipient')) return;\n    return Radio.request('entities', 'patients:model', this.get('_recipient'));\n  },\n  getEditor() {\n    if (!this.get('_editor')) {\n      return Radio.request('entities', 'clinicians:model', { name: 'RoundingWell' });\n    }\n\n    return Radio.request('entities', 'clinicians:model', this.get('_editor'));\n  },\n  getTeam() {\n    return Radio.request('entities', 'teams:model', this.get('_team'));\n  },\n  getState() {\n    return Radio.request('entities', 'states:model', this.get('_state'));\n  },\n  getProgram() {\n    if (!this.get('_program')) return;\n    return Radio.request('entities', 'programs:model', this.get('_program'));\n  },\n  getForm() {\n    if (!this.get('_form')) return;\n    return Radio.request('entities', 'forms:model', this.get('_form'));\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { Model, Collection } from './entities/directories';\n\nconst Entity = BaseEntity.extend({\n  Entity: { Model, Collection },\n  radioRequests: {\n    'directories:collection': 'getCollection',\n    'fetch:directories:model': 'fetchDirectory',\n    'fetch:directories:filterable': 'fetchFilterable',\n  },\n  fetchDirectory(slug, query) {\n    const model = new Model({ slug });\n\n    return model.fetch({ data: query });\n  },\n  fetchFilterable() {\n    const data = { filter: { filterable: true } };\n\n    return this.fetchCollection({ data });\n  },\n});\n\nexport default new Entity();\n","import { get, first } from 'underscore';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'files';\n\n// Adds `-copy` to the filename before the extension\nfunction dedupeFile(fileName) {\n  const extIndex = fileName.lastIndexOf('.');\n  return `${ fileName.slice(0, extIndex) }-copy${ fileName.slice(extIndex) }`;\n}\n\nconst _Model = BaseModel.extend({\n  defaults: {\n    path: '',\n    _progress: 0,\n  },\n  type: TYPE,\n  urlRoot() {\n    if (this.isNew()) {\n      const actionId = this.get('_action');\n\n      return `/api/actions/${ actionId }/relationships/files?urls=upload`;\n    }\n    return '/api/files';\n  },\n  fetchFile() {\n    return this.fetch({\n      url: `${ this.url() }?urls=download,view`,\n    });\n  },\n  createUpload(fileName) {\n    const path = `patient/${ this.get('_patient') }/${ fileName }`;\n    const promise = this.save({ path, _progress: 0 }, {}, { type: 'PUT' });\n\n    return promise.catch((/* istanbul ignore next */{ responseData } = {}) => {\n      const error = get(first(responseData.errors), 'detail', '');\n\n      /* istanbul ignore else */\n      if (error.includes('Another file exists')) {\n        return this.createUpload(dedupeFile(fileName));\n      }\n\n      /* istanbul ignore next */\n      throw responseData;\n    });\n  },\n  upload(file) {\n    this.createUpload(file.name)\n      .then(() => this.putFile(file))\n      .then(() => this.fetchFile())\n      .catch(() => {\n        this.trigger('upload:failed');\n        this.destroy();\n      });\n  },\n  putFile(file) {\n    const fileSize = file.size;\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState !== 4) return;\n        if (xhr.status !== 200) {\n          reject();\n\n          return;\n        }\n        this.set({ _progress: 100 });\n        resolve();\n      };\n\n      xhr.upload.onprogress = e => {\n        /* istanbul ignore if */\n        if (!e.lengthComputable) return;\n        this.set({ _progress: Math.round((e.loaded / fileSize) * 100) });\n      };\n\n      xhr.open('PUT', this.get('_upload'));\n      xhr.send(file);\n    });\n  },\n  getFilename() {\n    return this.get('path').split('/').pop();\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/events';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'events:model': 'getModel',\n    'events:collection': 'getCollection',\n    'fetch:actionEvents:collection': 'fetchActionEvents',\n    'fetch:flowEvents:collection': 'fetchFlowEvents',\n  },\n  fetchActionEvents(actionId) {\n    return this.fetchCollection({ url: `/api/actions/${ actionId }/activity` });\n  },\n  fetchFlowEvents(flowId) {\n    return this.fetchCollection({ url: `/api/flows/${ flowId }/activity` });\n  },\n});\n\nexport default new Entity();\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/files';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'files:model': 'getModel',\n    'fetch:files:collection:byAction': 'fetchFilesByAction',\n  },\n  fetchFilesByAction(actionId) {\n    const url = `/api/actions/${ actionId }/relationships/files`;\n    const data = { urls: ['download', 'view'] };\n\n    return this.fetchCollection({ url, data });\n  },\n});\n\nexport default new Entity();\n","import { extend } from 'underscore';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\nimport JsonApiMixin from 'js/base/jsonapi-mixin';\nimport fetcher from 'js/base/fetch';\n\nconst TYPE = 'flows';\nconst { parseRelationship } = JsonApiMixin;\n\nconst _parseRelationship = function(relationship, key) {\n  if (!relationship || key === 'owner') return relationship;\n\n  return parseRelationship(relationship, key);\n};\n\nconst _Model = BaseModel.extend({\n  urlRoot() {\n    if (this.isNew()) return `/api/patients/${ this.get('_patient') }/relationships/flows`;\n\n    return '/api/flows';\n  },\n  type: TYPE,\n  getPatient() {\n    return Radio.request('entities', 'patients:model', this.get('_patient'));\n  },\n  getOwner() {\n    const owner = this.get('_owner');\n    return Radio.request('entities', `${ owner.type }:model`, owner.id);\n  },\n  getState() {\n    return Radio.request('entities', 'states:model', this.get('_state'));\n  },\n  getProgramFlow() {\n    return Radio.request('entities', 'programFlows:model', this.get('_program_flow'));\n  },\n  isDone() {\n    const state = this.getState();\n    return state.isDone();\n  },\n  isAllDone() {\n    const { complete, total } = this.get('_progress');\n    return complete === total;\n  },\n  canEdit() {\n    const currentUser = Radio.request('bootstrap', 'currentUser');\n\n    if (currentUser.can('work:manage')) return true;\n\n    if (currentUser.can('work:owned:manage') && this.getOwner() === currentUser) return true;\n\n    return false;\n  },\n  saveState(state) {\n    return this.save({ _state: state.id }, {\n      relationships: {\n        state: this.toRelation(state),\n      },\n    });\n  },\n  saveOwner(owner) {\n    return this.save({ _owner: owner }, {\n      relationships: {\n        owner: this.toRelation(owner),\n      },\n    });\n  },\n  applyOwner(owner) {\n    const url = `${ this.url() }/relationships/actions`;\n    const relationships = { 'owner': this.toRelation(owner) };\n\n    return fetcher(url, { method: 'PATCH', data: JSON.stringify({ data: { relationships } }) });\n  },\n  saveAll(attrs) {\n    if (this.isNew()) attrs = extend({}, this.attributes, attrs);\n\n    const relationships = {\n      'state': this.toRelation(attrs._state, 'states'),\n      'owner': this.toRelation(attrs._owner),\n      'program-flow': this.toRelation(attrs._program_flow, 'program-flows'),\n    };\n\n    return this.save(attrs, { relationships }, { wait: true });\n  },\n  parseRelationship: _parseRelationship,\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/flows',\n  model: Model,\n  parseRelationship: _parseRelationship,\n  save(attrs) {\n    const saves = this.invoke('saveAll', attrs);\n\n    return Promise.all(saves);\n  },\n  applyOwner(owner) {\n    const saves = this.invoke('applyOwner', owner);\n\n    return Promise.all(saves);\n  },\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/flows';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'flows:model': 'getModel',\n    'flows:collection': 'getCollection',\n    'fetch:flows:model': 'fetchFlow',\n    'fetch:flows:collection': 'fetchFlows',\n    'fetch:flows:collection:byPatient': 'fetchFlowsByPatient',\n  },\n  fetchFlow(id) {\n    const include = [\n      'program-flow',\n      'program-flow.program',\n      'program-flow.program-actions',\n    ].join();\n    return this.fetchModel(id, { data: { include } });\n  },\n  fetchFlows({ filter, include }) {\n    const data = { filter, include };\n\n    return this.fetchCollection({ data });\n  },\n  fetchFlowsByPatient({ patientId, filter }) {\n    const data = { filter };\n    const url = `/api/patients/${ patientId }/relationships/flows`;\n\n    return this.fetchCollection({ url, data });\n  },\n});\n\nexport default new Entity();\n","import Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'form-responses';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/form-responses',\n  saveAll() {\n    const attrs = this.attributes;\n\n    const relationships = {\n      'form': this.toRelation(attrs._form, 'forms'),\n      'patient': this.toRelation(attrs._patient, 'patients'),\n      'action': this.toRelation(attrs._action, 'patient-actions'),\n    };\n\n    return this.save(attrs, { relationships }, { wait: true });\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/form-responses',\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import { reduce } from 'underscore';\nimport BaseEntity from 'js/base/entity-service';\nimport fetcher, { handleJSON } from 'js/base/fetch';\nimport { _Model, Model, Collection } from './entities/form-responses';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'formResponses:model': 'getModel',\n    'formResponses:collection': 'getCollection',\n    'fetch:formResponses:submission': 'fetchSubmission',\n    'fetch:formResponses:latestSubmission': 'fetchLatestSubmission',\n  },\n  fetchSubmission(responseId) {\n    if (!responseId) return [{}];\n    return fetcher(`/api/form-responses/${ responseId }/response`).then(handleJSON);\n  },\n  fetchLatestSubmission(patientId, filter) {\n    const data = reduce(filter, (filters, value, key) => {\n      if (!value) return filters;\n      filters.filter[key] = value;\n      return filters;\n    }, { filter: {} });\n    return fetcher(`/api/patients/${ patientId }/form-responses/latest`, { data }).then(handleJSON);\n  },\n});\n\nexport default new Entity();\n","import { isObject, isEmpty, extend } from 'underscore';\nimport { v5 as uuid } from 'uuid';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'patient-fields';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  url() {\n    return `/api/patients/${ this.get('_patient') }/fields/${ this.get('name') }`;\n  },\n  isNew() {\n    // NOTE: This will treat the PATCH like a PUT\n    // We won't always have an ID, but never need to POST\n    return false;\n  },\n  getValue() {\n    const value = this.get('value');\n    return isObject(value) && isEmpty(value) ? null : value;\n  },\n  saveAll(attrs) {\n    attrs = extend({}, this.attributes, attrs);\n\n    // NOTE: sets the id instead of attrs.id due to how backbone's save works\n    if (!attrs.id) {\n      this.set({ id: uuid(`resource:field:${ attrs.name.toLowerCase() }`, attrs._patient) });\n    }\n\n    const relationships = {\n      'patient': this.toRelation(attrs._patient, 'patients'),\n    };\n\n    return this.save(attrs, { relationships }, { wait: true });\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import { extend, isEmpty } from 'underscore';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport dayjs from 'dayjs';\n\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'patients';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/patients',\n  /* eslint-disable complexity */\n  validate({ first_name, last_name, birth_date, sex, _workspaces }) {\n    const errors = {};\n\n    if (!first_name || !last_name) errors.name = 'required';\n    if (!sex) errors.sex = 'required';\n    if (!_workspaces || !_workspaces.length) errors.workspaces = 'required';\n\n    if (!birth_date) errors.birth_date = 'required';\n    else if (dayjs(birth_date).isAfter()) errors.birth_date = 'invalidDate';\n\n    if (!isEmpty(errors)) return errors;\n  },\n  getWorkspaces() {\n    return Radio.request('entities', 'workspaces:collection', this.get('_workspaces'));\n  },\n  getFields() {\n    return Radio.request('entities', 'patientFields:collection', this.get('_patient_fields'));\n  },\n  getField(name) {\n    const fields = this.getFields();\n    return fields.find({ name });\n  },\n  addWorkspace(workspace) {\n    const workspaces = this.getWorkspaces();\n    workspaces.add(workspace);\n    this.set('_workspaces', workspaces.map(model => model.pick('id')));\n  },\n  removeWorkspace(workspace) {\n    const workspaces = this.getWorkspaces();\n    workspaces.remove(workspace);\n    this.set('_workspaces', workspaces.map(model => model.pick('id')));\n  },\n  saveAll(attrs) {\n    attrs = extend({}, this.attributes, attrs);\n\n    const relationships = {\n      'workspaces': this.toRelation(attrs._workspaces, 'workspaces'),\n    };\n\n    const opts = { wait: true };\n\n    if (this.isNew()) opts.type = 'PUT';\n\n    return this.save(attrs, { relationships }, opts);\n  },\n  canEdit() {\n    return this.isNew() || this.get('source') === 'manual';\n  },\n  getSortName() {\n    return (this.get('last_name') + this.get('first_name')).toLowerCase();\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/patients',\n  model: Model,\n});\n\nexport {\n  Model,\n  _Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/patient-fields';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'patientFields:model': 'getModel',\n    'patientFields:collection': 'getCollection',\n    'fetch:patientFields:model': 'fetchPatientField',\n  },\n  fetchPatientField(patientId, fieldName) {\n    const url = `/api/patients/${ patientId }/fields/${ fieldName }`;\n\n    return this.fetchModel(fieldName, { url, abort: false }).then(field => {\n      // NOTE: hydrate store now that the id is known\n      this.getModel(field.attributes);\n    });\n  },\n});\n\nexport default new Entity();\n","import { debounce, get, isBoolean, noop } from 'underscore';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'patients-search-results';\n\nconst Model = BaseModel.extend({\n  type: TYPE,\n});\n\nconst Collection = BaseCollection.extend({\n  url: '/api/patients',\n  model: Model,\n  initialize() {\n    this._debouncedSearch = debounce(this._debouncedSearch, 150);\n  },\n  prevSearch: '',\n  fetcher: { abort: noop },\n  search(\n    /* istanbul ignore next */\n    search = '') {\n    if (search.length < 3) {\n      if (!search.length || !this.prevSearch.includes(search)) {\n        delete this._hasIdentifiers;\n        this.reset();\n        this.prevSearch = '';\n      }\n      this._debouncedSearch.cancel();\n      this.fetcher.abort();\n      return;\n    }\n\n    this.prevSearch = search;\n    this.isSearching = true;\n    this._debouncedSearch(search);\n  },\n  hasIdentifiers() {\n    if (isBoolean(this._hasIdentifiers)) return this._hasIdentifiers;\n\n    this._hasIdentifiers = !!this.find(model => {\n      return get(model.get('identifiers'), 'length');\n    });\n\n    return this._hasIdentifiers;\n  },\n  _debouncedSearch(search) {\n    const filter = { search };\n\n    delete this._hasIdentifiers;\n    this.fetcher = this.fetch({ data: { filter } });\n\n    this.fetcher.then(() => {\n      this.isSearching = false;\n      this.trigger('search', this);\n    });\n  },\n});\n\nexport {\n  Collection,\n  Model,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/patients';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'patients:model': 'getModel',\n    'patients:collection': 'getCollection',\n    'fetch:patients:model': 'fetchModel',\n    'fetch:patients:model:byAction': 'fetchPatientByAction',\n    'fetch:patients:model:byFlow': 'fetchPatientByFlow',\n  },\n  fetchPatientByAction(actionId) {\n    return this.fetchBy(`/api/actions/${ actionId }/patient`);\n  },\n  fetchPatientByFlow(flowId) {\n    return this.fetchBy(`/api/flows/${ flowId }/patient`);\n  },\n});\n\nexport default new Entity();\n","import BaseEntity from 'js/base/entity-service';\nimport { Model, Collection } from './entities/patient-search-results';\n\nconst Entity = BaseEntity.extend({\n  Entity: { Model, Collection },\n  radioRequests: {\n    'searchPatients:collection': 'getCollection',\n  },\n});\n\nexport default new Entity();\n","import { extend, first } from 'underscore';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\nimport JsonApiMixin from 'js/base/jsonapi-mixin';\n\nimport trim from 'js/utils/formatting/trim';\nimport collectionOf from 'js/utils/formatting/collection-of';\n\nimport { ACTION_OUTREACH, STATE_STATUS } from 'js/static';\n\nconst TYPE = 'program-actions';\nconst { parseRelationship } = JsonApiMixin;\n\nconst _parseRelationship = function(relationship, key) {\n  if (!relationship || key === 'owner') return relationship;\n\n  return parseRelationship(relationship, key);\n};\n\nconst _Model = BaseModel.extend({\n  urlRoot: '/api/program-actions',\n  type: TYPE,\n  validate({ name }) {\n    if (!trim(name)) return 'Action name required';\n  },\n  getTags() {\n    return Radio.request('entities', 'tags:collection', collectionOf(this.get('tags'), 'text'));\n  },\n  addTag(tag) {\n    const tags = this.getTags();\n    tags.add(tag);\n    return this.save({ tags: tags.map('text') });\n  },\n  removeTag(tag) {\n    const tags = this.getTags();\n    tags.remove(tag);\n    return this.save({ tags: tags.map('text') });\n  },\n  getAction({ patientId, flowId }) {\n    const currentUser = Radio.request('bootstrap', 'currentUser');\n    const currentWorkspace = Radio.request('bootstrap', 'currentWorkspace');\n    const states = currentWorkspace.getStates();\n\n    const defaultInitialState = first(states.filter({ status: STATE_STATUS.QUEUED }));\n\n    return Radio.request('entities', 'actions:model', {\n      name: this.get('name'),\n      _flow: flowId,\n      _patient: patientId,\n      _state: defaultInitialState.id,\n      _owner: this.get('_owner') || {\n        id: currentUser.id,\n        type: 'clinicians',\n      },\n      _program_action: this.id,\n    });\n  },\n  enableAttachmentUploads() {\n    this.save({ allowed_uploads: ['pdf'] });\n  },\n  disableAttachmentUploads() {\n    this.save({ allowed_uploads: [] });\n  },\n  getOwner() {\n    const owner = this.get('_owner');\n    if (!owner) return;\n    return Radio.request('entities', 'teams:model', owner.id);\n  },\n  saveOwner(owner) {\n    owner = this.toRelation(owner);\n    return this.save({ _owner: owner.data }, {\n      relationships: { owner },\n    });\n  },\n  getForm() {\n    const formId = this.get('_form');\n    if (!formId) return;\n    return Radio.request('entities', 'forms:model', formId);\n  },\n  hasOutreach() {\n    return this.get('outreach') !== ACTION_OUTREACH.DISABLED;\n  },\n  saveForm(form) {\n    form = this.toRelation(form);\n    const saveData = { _form: form.data };\n    if (!form.data) saveData.outreach = ACTION_OUTREACH.DISABLED;\n\n    return this.save(saveData, {\n      relationships: { form },\n    });\n  },\n  saveAll(attrs) {\n    attrs = extend({}, this.attributes, attrs);\n\n    const relationships = {\n      'owner': this.toRelation(attrs._owner, 'teams'),\n      'form': this.toRelation(attrs._form, 'forms'),\n      'program-flow': this.toRelation(attrs._program_flow, 'program-flows'),\n      'program': this.toRelation(attrs._program, 'programs'),\n    };\n\n    return this.save(attrs, { relationships }, { wait: true });\n  },\n  parseRelationship: _parseRelationship,\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  initialize(models, options = {}) {\n    this.flowId = options.flowId;\n    if (this.flowId) this.comparator = 'sequence';\n  },\n  url() {\n    if (this.flowId) return `/api/program-flows/${ this.flowId }/actions`;\n    return '/api/program-actions';\n  },\n  model: Model,\n  parseRelationship: _parseRelationship,\n  updateSequences() {\n    const data = this.map((flowAction, sequence) => {\n      flowAction.set({ sequence });\n      return flowAction.toJSONApi({ sequence });\n    });\n\n    return this.sync('patch', this, {\n      url: this.url(),\n      data: JSON.stringify({ data }),\n    });\n  },\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import { extend, first } from 'underscore';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\nimport JsonApiMixin from 'js/base/jsonapi-mixin';\n\nimport trim from 'js/utils/formatting/trim';\nimport collectionOf from 'js/utils/formatting/collection-of';\n\n\nimport { STATE_STATUS } from 'js/static';\n\nconst TYPE = 'program-flows';\nconst { parseRelationship } = JsonApiMixin;\n\nconst _parseRelationship = function(relationship, key) {\n  if (!relationship || key === 'owner') return relationship;\n\n  return parseRelationship(relationship, key);\n};\n\nconst _Model = BaseModel.extend({\n  urlRoot() {\n    if (this.isNew()) return `/api/programs/${ this.get('_program') }/relationships/flows`;\n\n    return '/api/program-flows';\n  },\n  type: TYPE,\n  validate({ name }) {\n    if (!trim(name)) return 'Flow name required';\n  },\n  getTags() {\n    return Radio.request('entities', 'tags:collection', collectionOf(this.get('tags'), 'text'));\n  },\n  addTag(tag) {\n    const tags = this.getTags();\n    tags.add(tag);\n    return this.save({ tags: tags.map('text') });\n  },\n  removeTag(tag) {\n    const tags = this.getTags();\n    tags.remove(tag);\n    return this.save({ tags: tags.map('text') });\n  },\n  getOwner() {\n    const owner = this.get('_owner');\n    if (!owner) return;\n    return Radio.request('entities', 'teams:model', owner.id);\n  },\n  getFlow(patientId) {\n    const currentWorkspace = Radio.request('bootstrap', 'currentWorkspace');\n    const states = currentWorkspace.getStates();\n\n    const defaultInitialState = first(states.filter({ status: STATE_STATUS.QUEUED }));\n\n    const flow = Radio.request('entities', 'flows:model', {\n      _patient: patientId,\n      _program_flow: this.get('id'),\n      _state: defaultInitialState.id,\n    });\n\n    return flow;\n  },\n  saveOwner(owner) {\n    owner = this.toRelation(owner);\n    return this.save({ _owner: owner.data }, {\n      relationships: { owner },\n    });\n  },\n  saveAll(attrs) {\n    attrs = extend({}, this.attributes, attrs);\n\n    const relationships = {\n      owner: this.toRelation(attrs._owner, 'teams'),\n    };\n\n    return this.save(attrs, { relationships }, { wait: true });\n  },\n  getActions() {\n    return Radio.request('entities', 'programActions:collection', this.get('_program_actions'), { flowId: this.id });\n  },\n  parseRelationship: _parseRelationship,\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/program-flows',\n  model: Model,\n  parseRelationship: _parseRelationship,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/program-actions';\n\nimport { PROGRAM_BEHAVIORS } from 'js/static';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'programActions:model': 'getModel',\n    'programActions:collection': 'getCollection',\n    'fetch:programActions:model': 'fetchModel',\n    'fetch:programActions:collection:byProgram': 'fetchProgramActionsByProgram',\n    'fetch:programActions:collection': 'fetchProgramActions',\n    'fetch:programActions:collection:byProgramFlow': 'fetchProgramActionsByFlow',\n  },\n  fetchProgramActionsByProgram({ programId }) {\n    const url = `/api/programs/${ programId }/relationships/actions`;\n\n    return this.fetchCollection({ url });\n  },\n  fetchProgramActions(behavior = PROGRAM_BEHAVIORS.STANDARD) {\n    const collection = new this.Entity.Collection();\n\n    return collection.fetch({ data: { filter: { behavior } } });\n  },\n  fetchProgramActionsByFlow(flowId, options) {\n    const collection = new Collection([], { flowId });\n\n    return collection.fetch(options);\n  },\n});\n\nexport default new Entity();\n","import Backbone from 'backbone';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nimport trim from 'js/utils/formatting/trim';\n\nimport { PROGRAM_BEHAVIORS } from 'js/static';\n\nconst TYPE = 'programs';\n\nfunction filterAddableProgramItems(entities) {\n  return entities.filter(entity => {\n    return entity.get('published') && entity.get('behavior') !== PROGRAM_BEHAVIORS.AUTOMATED;\n  });\n}\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  validate({ name }) {\n    if (!trim(name)) return 'Program name required';\n  },\n  urlRoot: '/api/programs',\n\n  getPublished() {\n    const programActions = Radio.request('entities', 'programActions:collection', this.get('_program_actions'));\n    const programFlows = Radio.request('entities', 'programFlows:collection', this.get('_program_flows'));\n\n    const actions = Radio.request('entities', 'programActions:collection', filterAddableProgramItems(programActions));\n    const flows = Radio.request('entities', 'programFlows:collection', filterAddableProgramItems(programFlows));\n\n    return new Backbone.Collection([...flows.models, ...actions.models], { comparator: 'name' });\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/programs',\n  model: Model,\n});\n\nexport {\n  Model,\n  _Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/program-flows';\n\nimport { PROGRAM_BEHAVIORS } from 'js/static';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'programFlows:model': 'getModel',\n    'programFlows:collection': 'getCollection',\n    'fetch:programFlows:model': 'fetchModel',\n    'fetch:programFlows:collection:byProgram': 'fetchProgramFlowsByProgram',\n    'fetch:programFlows:collection': 'fetchProgramFlows',\n  },\n  fetchProgramFlowsByProgram({ programId }) {\n    const url = `/api/programs/${ programId }/relationships/flows`;\n\n    return this.fetchCollection({ url });\n  },\n  fetchProgramFlows(behavior = PROGRAM_BEHAVIORS.STANDARD) {\n    const collection = new this.Entity.Collection();\n\n    return collection.fetch({ data: { filter: { behavior } } });\n  },\n});\n\nexport default new Entity();\n","import Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'roles';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/roles',\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/roles',\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/programs';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'programs:model': 'getModel',\n    'programs:collection': 'getCollection',\n    'fetch:programs:model': 'fetchModel',\n    'fetch:programs:collection': 'fetchCollection',\n    'fetch:programs:model:byProgramFlow': 'fetchProgramByProgramFlow',\n  },\n  fetchProgramByProgramFlow(flowId) {\n    return this.fetchBy(`/api/program-flows/${ flowId }/program`);\n  },\n});\n\nexport default new Entity();\n","import Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'settings';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/settings',\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/settings',\n  model: Model,\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/roles';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'roles:model': 'getModel',\n    'roles:collection': 'getCollection',\n    'fetch:roles:collection': 'fetchCollection',\n  },\n});\n\nexport default new Entity();\n","import Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nimport { STATE_STATUS } from 'js/static';\n\nconst TYPE = 'states';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  isDone() {\n    return this.get('status') === STATE_STATUS.DONE;\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/states',\n  model: Model,\n  groupByDone() {\n    const { done, notDone } = this.groupBy(state => {\n      return state.isDone() ? 'done' : 'notDone';\n    });\n\n    return {\n      done: new Collection(done),\n      notDone: new Collection(notDone),\n    };\n  },\n  getFilterIds() {\n    return this.map('id').join(',');\n  },\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/settings';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'settings:model': 'getModel',\n    'fetch:settings:collection': 'fetchCollection',\n  },\n});\n\nexport default new Entity();\n","import { map } from 'underscore';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'tags';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  idAttribute: 'text',\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/tags',\n  model: Model,\n  parse(response) {\n    return map(response.data, tag => {\n      return { text: tag };\n    });\n  },\n  comparator: 'text',\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/states';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'states:model': 'getModel',\n    'states:collection': 'getCollection',\n    'fetch:states:collection': 'fetchCollection',\n  },\n});\n\nexport default new Entity();\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/tags';\n\nlet tagsCache;\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'tags:model': 'getModel',\n    'tags:collection': 'getCollection',\n    'fetch:tags:collection': 'fetchTags',\n  },\n  fetchTags() {\n    if (tagsCache) return tagsCache;\n\n    return this.fetchCollection().then(tags => {\n      tagsCache = tags;\n      return tags;\n    });\n  },\n});\n\nexport default new Entity();\n","import Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'teams';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/teams',\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/teams',\n  model: Model,\n  comparator: 'name',\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import { uniqueId } from 'underscore';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'widgets';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/widgets',\n  model: Model,\n  modelId(attr) {\n    return uniqueId(`${ attr.id }-`);\n  },\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/teams';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'teams:model': 'getModel',\n    'teams:collection': 'getCollection',\n    'fetch:teams:collection': 'fetchCollection',\n  },\n});\n\nexport default new Entity();\n","import { reject, union, pick } from 'underscore';\nimport Radio from 'backbone.radio';\nimport Store from 'backbone.store';\nimport BaseCollection from 'js/base/collection';\nimport BaseModel from 'js/base/model';\n\nconst TYPE = 'workspaces';\n\nconst _Model = BaseModel.extend({\n  type: TYPE,\n  urlRoot: '/api/workspaces',\n  getStates() {\n    return Radio.request('entities', 'states:collection', this.get('_states'));\n  },\n  getForms() {\n    return Radio.request('entities', 'forms:collection', this.get('_forms'));\n  },\n  getAssignableClinicians() {\n    const clinicians = Radio.request('entities', 'clinicians:collection', this.get('_clinicians'));\n\n    const assignableClinicians = clinicians.filter(clinician => {\n      return clinician.isActive() && clinician.get('enabled') && clinician.can('work:own');\n    });\n\n    clinicians.reset(assignableClinicians);\n\n    return clinicians;\n  },\n  updateClinicians(clinicians) {\n    this.set('_clinicians', clinicians.map(m => pick(m, 'id', 'type')));\n  },\n  addClinician(clinician) {\n    const url = `/api/workspaces/${ this.id }/relationships/clinicians`;\n    const workspaces = clinician.get('_workspaces');\n\n    clinician.set({ _workspaces: union(workspaces, [{ id: this.id }]) });\n\n    this.set({ _clinicians: union(this.get('_clinicians'), [{ id: clinician.id }]) });\n\n    return this.sync('create', this, {\n      url,\n      data: JSON.stringify({\n        data: [{\n          id: clinician.id,\n          type: clinician.type,\n        }],\n      }),\n    });\n  },\n  removeClinician(clinician) {\n    const url = `/api/workspaces/${ this.id }/relationships/clinicians`;\n\n    clinician.set({ _workspaces: reject(clinician.get('_workspaces'), { id: this.id }) });\n\n    this.set({\n      _clinicians: reject(this.get('_clinicians'), { id: clinician.id }),\n    });\n\n    return this.sync('delete', this, {\n      url,\n      data: JSON.stringify({\n        data: [{\n          id: clinician.id,\n          type: clinician.type,\n        }],\n      }),\n    });\n  },\n});\n\nconst Model = Store(_Model, TYPE);\nconst Collection = BaseCollection.extend({\n  url: '/api/workspaces',\n  model: Model,\n  comparator: 'name',\n});\n\nexport {\n  _Model,\n  Model,\n  Collection,\n};\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/widgets';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'widgets:model': 'getModel',\n    'widgets:collection': 'getCollection',\n    'fetch:widgets:collection': 'fetchWidgets',\n  },\n  fetchWidgets({ filter = {} } = {}) {\n    const data = { filter };\n    return this.fetchCollection({ data });\n  },\n\n});\n\nexport default new Entity();\n","import BaseEntity from 'js/base/entity-service';\nimport { _Model, Model, Collection } from './entities/workspaces';\n\nconst Entity = BaseEntity.extend({\n  Entity: { _Model, Model, Collection },\n  radioRequests: {\n    'workspaces:model': 'getModel',\n    'workspaces:collection': 'getCollection',\n    'fetch:workspaces:collection': 'fetchCollection',\n  },\n});\n\nexport default new Entity();\n","const ACTION_OUTREACH = {\n  DISABLED: 'disabled',\n  PATIENT: 'patient',\n};\n\nconst ACTION_SHARING = {\n  DISABLED: 'disabled',\n  PENDING: 'pending',\n  SENT: 'sent',\n  RESPONDED: 'responded',\n  CANCELED: 'canceled',\n  ERROR_NO_PHONE: 'error_no_phone',\n  ERROR_OPT_OUT: 'error_opt_out',\n  ERROR_SMS_FAILED: 'error_sms_failed',\n};\n\nconst PROGRAM_BEHAVIORS = {\n  STANDARD: 'standard',\n  CONDITIONAL: 'conditional',\n  AUTOMATED: 'automated',\n};\n\nconst RELATIVE_DATE_RANGES = [\n  {\n    id: 'today',\n    unit: 'day',\n    prev: 0,\n  },\n  {\n    id: 'yesterday',\n    unit: 'day',\n    prev: 1,\n  },\n  {\n    id: 'thisweek',\n    unit: 'week',\n    prev: 0,\n  },\n  {\n    id: 'lastweek',\n    unit: 'week',\n    prev: 1,\n  },\n  {\n    id: 'thismonth',\n    unit: 'month',\n    prev: 0,\n  },\n  {\n    id: 'lastmonth',\n    unit: 'month',\n    prev: 1,\n  },\n];\n\nconst STATE_STATUS = {\n  STARTED: 'started',\n  QUEUED: 'queued',\n  DONE: 'done',\n};\n\nexport {\n  ACTION_OUTREACH,\n  ACTION_SHARING,\n  PROGRAM_BEHAVIORS,\n  RELATIVE_DATE_RANGES,\n  STATE_STATUS,\n};\n","import { isNumber } from 'underscore';\n\n// negates based on sort direction a sortable value\nfunction sortByDir(sortDirection, sortableVal) {\n  return (sortDirection === 'desc') ? (sortableVal * -1) : sortableVal;\n}\n\nfunction alphaSort(sortDir, a, b, nullVal = '') {\n  if (!a) a = nullVal;\n  if (!b) b = nullVal;\n  return sortByDir(sortDir, a.localeCompare(b));\n}\n\nfunction getSortNum(val, defaultVal = -1) {\n  return isNumber(val) ? val : defaultVal;\n}\n\nfunction numSortBy(sortDir, val, nullVal) {\n  const num = getSortNum(val, nullVal);\n  return sortByDir(sortDir, num);\n}\n\nfunction numSort(sortDir, a, b, nullVal = Number.NEGATIVE_INFINITY) {\n  if (!a) a = nullVal;\n  if (!b) b = nullVal;\n  const sortVal = getSortNum(a, nullVal) > getSortNum(b, nullVal) ? 1 : -1;\n  return sortByDir(sortDir, sortVal);\n}\n\nfunction intSortBy(sortDir, val, nullVal) {\n  const int = getSortNum(val, nullVal);\n  return sortByDir(sortDir, parseInt(int, 10));\n}\n\nexport {\n  alphaSort,\n  intSortBy,\n  numSortBy,\n  numSort,\n};\n"],"names":["TYPE","parseRelationship","JsonApiMixin","_parseRelationship","relationship","key","_Model","BaseModel","urlRoot","this","isNew","flow","get","type","validate","_ref","name","trim","hasTag","tagName","contains","getForm","formId","Radio","getFormResponses","comparator","responseA","responseB","alphaSort","getPatient","getOwner","owner","id","getFlow","getState","getPreviousState","previous","isLocked","isDone","isOverdue","date","time","dayjs","isBefore","dueDateTime","isAdHoc","hasOutreach","ACTION_OUTREACH","hasSharing","ACTION_SHARING","canEdit","currentUser","can","saveDueDate","save","due_date","format","due_time","saveDueTime","saveState","state","saveOpts","_state","sharing","includes","relationships","toRelation","saveOwner","_owner","saveAll","attrs","extend","attributes","_flow","_form","_program_action","wait","hasAttachments","size","hasAllowedUploads","programAction","Model","Store","Collection","BaseCollection","url","model","saves","invoke","Promise","all","groupByDate","groupedCollection","groupBy","reduce","keys","collection","add","actions","Backbone","BaseEntity","Entity","radioRequests","fetchAction","include","join","fetchModel","data","fetchActions","filter","fetchCollection","fetchActionsByPatient","_ref2","patientId","fetchActionsByFlow","flowId","preinitialize","on","onChangeTeam","email","_role","previousTeam","set","reject","team","union","getWorkspaces","addWorkspace","workspace","workspaces","removeWorkspace","remove","getTeam","hasTeam","intl","NIL_UUID","getRole","prop","permissions","saveRole","role","saveTeam","_team","_workspaces","getInitials","names","String","split","length","first","charAt","last","isEditable","isActive","hasWorkspaces","lastActive","fetchCurrentClinician","fetchBy","then","setUser","pick","fetchByWorkspace","workspaceId","message","getClinician","fetchCommentsByAction","actionId","getOptions","options","map","value","fetchDirectory","slug","query","fetch","fetchFilterable","filterable","getRecipient","getEditor","getProgram","fetchActionEvents","fetchFlowEvents","defaults","path","_progress","fetchFile","createUpload","fileName","_this","catch","responseData","arguments","undefined","errors","extIndex","lastIndexOf","slice","dedupeFile","upload","file","putFile","trigger","destroy","fileSize","resolve","xhr","XMLHttpRequest","onreadystatechange","readyState","status","onprogress","e","lengthComputable","Math","round","loaded","open","send","getFilename","pop","fetchFilesByAction","urls","getProgramFlow","isAllDone","complete","total","applyOwner","fetcher","method","JSON","stringify","_program_flow","fetchFlow","fetchFlows","fetchFlowsByPatient","_patient","_action","fetchSubmission","responseId","handleJSON","fetchLatestSubmission","filters","getValue","isObject","isEmpty","uuid","toLowerCase","fetchPatientField","fieldName","abort","field","getModel","first_name","last_name","birth_date","sex","isAfter","getFields","getField","find","opts","getSortName","fetchPatientByAction","fetchPatientByFlow","initialize","_debouncedSearch","debounce","prevSearch","noop","search","_hasIdentifiers","reset","cancel","isSearching","hasIdentifiers","isBoolean","getTags","collectionOf","addTag","tag","tags","removeTag","getAction","states","getStates","defaultInitialState","STATE_STATUS","enableAttachmentUploads","allowed_uploads","disableAttachmentUploads","saveForm","form","saveData","outreach","_program","models","updateSequences","flowAction","sequence","toJSONApi","sync","fetchProgramActionsByProgram","programId","fetchProgramActions","behavior","PROGRAM_BEHAVIORS","fetchProgramActionsByFlow","getActions","fetchProgramFlowsByProgram","fetchProgramFlows","filterAddableProgramItems","entities","entity","getPublished","programActions","programFlows","flows","fetchProgramByProgramFlow","groupByDone","done","notDone","getFilterIds","idAttribute","parse","response","text","tagsCache","fetchTags","modelId","attr","uniqueId","fetchWidgets","getForms","getAssignableClinicians","clinicians","assignableClinicians","clinician","updateClinicians","m","addClinician","_clinicians","removeClinician","DISABLED","PATIENT","PENDING","SENT","RESPONDED","CANCELED","ERROR_NO_PHONE","ERROR_OPT_OUT","ERROR_SMS_FAILED","STANDARD","CONDITIONAL","AUTOMATED","RELATIVE_DATE_RANGES","unit","prev","STARTED","QUEUED","DONE","sortByDir","sortDirection","sortableVal","sortDir","a","b","nullVal","localeCompare","getSortNum","val","defaultVal","isNumber","numSort","Number","NEGATIVE_INFINITY"],"sourceRoot":""}