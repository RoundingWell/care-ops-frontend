import{u as Et,B as a,S as l,a as c,J as R,c as r,t as $,f as Ct,h as Mt}from"./20240823-app-BJIi6Sv9.js";import{R as o,B as Z}from"./20240823-runtime-Bl8sZXuA.js";import{I as ee,e as _,y as v,r as te,N as xt,H as O,O as N,P as A,Q as Tt,R as qt,m as J,B as j,S as Pt,A as bt,h as se,d as kt,T as St,U as Dt,u as Ut,x as Bt}from"./20240823-index-BGsFU5cT.js";import{d as y}from"./20240823-parsePhoneNumber-DSWZu1ne.js";const oe="00000000-0000-0000-0000-000000000000",Ft=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;function ie(e){return typeof e=="string"&&Ft.test(e)}function It(e){if(!ie(e))throw TypeError("Invalid UUID");var t,s=new Uint8Array(16);return s[0]=(t=parseInt(e.slice(0,8),16))>>>24,s[1]=t>>>16&255,s[2]=t>>>8&255,s[3]=t&255,s[4]=(t=parseInt(e.slice(9,13),16))>>>8,s[5]=t&255,s[6]=(t=parseInt(e.slice(14,18),16))>>>8,s[7]=t&255,s[8]=(t=parseInt(e.slice(19,23),16))>>>8,s[9]=t&255,s[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,s[11]=t/4294967296&255,s[12]=t>>>24&255,s[13]=t>>>16&255,s[14]=t>>>8&255,s[15]=t&255,s}function Ot(e){e=unescape(encodeURIComponent(e));for(var t=[],s=0;s<e.length;++s)t.push(e.charCodeAt(s));return t}var Nt="6ba7b810-9dad-11d1-80b4-00c04fd430c8",Yt="6ba7b811-9dad-11d1-80b4-00c04fd430c8";function Lt(e,t,s){function i(n,d,h,g){var p;if(typeof n=="string"&&(n=Ot(n)),typeof d=="string"&&(d=It(d)),((p=d)===null||p===void 0?void 0:p.length)!==16)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var u=new Uint8Array(16+n.length);if(u.set(d),u.set(n,d.length),u=s(u),u[6]=u[6]&15|t,u[8]=u[8]&63|128,h){g=g||0;for(var f=0;f<16;++f)h[g+f]=u[f];return h}return Et(u)}try{i.name=e}catch{}return i.DNS=Nt,i.URL=Yt,i}function Wt(e,t,s,i){switch(e){case 0:return t&s^~t&i;case 1:return t^s^i;case 2:return t&s^t&i^s&i;case 3:return t^s^i}}function F(e,t){return e<<t|e>>>32-t}function Vt(e){var t=[1518500249,1859775393,2400959708,3395469782],s=[1732584193,4023233417,2562383102,271733878,3285377520];if(typeof e=="string"){var i=unescape(encodeURIComponent(e));e=[];for(var n=0;n<i.length;++n)e.push(i.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var d=e.length/4+2,h=Math.ceil(d/16),g=new Array(h),p=0;p<h;++p){for(var u=new Uint32Array(16),f=0;f<16;++f)u[f]=e[p*64+f*4]<<24|e[p*64+f*4+1]<<16|e[p*64+f*4+2]<<8|e[p*64+f*4+3];g[p]=u}g[h-1][14]=(e.length-1)*8/Math.pow(2,32),g[h-1][14]=Math.floor(g[h-1][14]),g[h-1][15]=(e.length-1)*8&4294967295;for(var U=0;U<h;++U){for(var m=new Uint32Array(80),E=0;E<16;++E)m[E]=g[U][E];for(var w=16;w<80;++w)m[w]=F(m[w-3]^m[w-8]^m[w-14]^m[w-16],1);for(var C=s[0],M=s[1],x=s[2],T=s[3],B=s[4],q=0;q<80;++q){var Q=Math.floor(q/20),Rt=F(C,5)+Wt(Q,M,x,T)+B+t[Q]+m[q]>>>0;B=T,T=x,x=F(M,30)>>>0,M=C,C=Rt}s[0]=s[0]+C>>>0,s[1]=s[1]+M>>>0,s[2]=s[2]+x>>>0,s[3]=s[3]+T>>>0,s[4]=s[4]+B>>>0}return[s[0]>>24&255,s[0]>>16&255,s[0]>>8&255,s[0]&255,s[1]>>24&255,s[1]>>16&255,s[1]>>8&255,s[1]&255,s[2]>>24&255,s[2]>>16&255,s[2]>>8&255,s[2]&255,s[3]>>24&255,s[3]>>16&255,s[3]>>8&255,s[3]&255,s[4]>>24&255,s[4]>>16&255,s[4]>>8&255,s[4]&255]}var S=Lt("v5",80,Vt);const Y={DISABLED:"disabled",PATIENT:"patient"},L={DRAFT:"draft",SUBMITTED:"submitted",ANY:"draft,submitted"},P={DISABLED:"disabled",PENDING:"pending",SENT:"sent",RESPONDED:"responded",CANCELED:"canceled",ERROR_NO_PHONE:"error_no_phone",ERROR_OPT_OUT:"error_opt_out",ERROR_SMS_FAILED:"error_sms_failed"},D={STANDARD:"standard",CONDITIONAL:"conditional",AUTOMATED:"automated"},Gs=[{id:"today",unit:"day",prev:0},{id:"yesterday",unit:"day",prev:1},{id:"thisweek",unit:"week",prev:0},{id:"lastweek",unit:"week",prev:1},{id:"thismonth",unit:"month",prev:0},{id:"lastmonth",unit:"month",prev:1}],G={STARTED:"started",QUEUED:"queued",DONE:"done"},b={ACTIVE:"active",INACTIVE:"inactive",ARCHIVED:"archived"},ne="patient-actions",{parseRelationship:Ht}=R,re=function(e,t){return!e||t==="owner"?e:Ht(e,t)},ae=a.extend({urlRoot(){if(this.isNew()){const e=this.get("_flow");return e?`/api/flows/${e}/relationships/actions`:`/api/patients/${this.get("_patient")}/relationships/actions`}return"/api/actions"},type:ne,hasTag(e){return ee(this.get("tags"),e)},getForm(){const e=this.get("_form");if(e)return o.request("entities","forms:model",e)},getFormResponses(){return o.request("entities","formResponses:collection",this.get("_form_responses"))},getPatient(){return o.request("entities","patients:model",this.get("_patient"))},getOwner(){const e=this.get("_owner");return o.request("entities",`${e.type}:model`,e.id)},isSameTeamAsUser(){const t=o.request("bootstrap","currentUser").getTeam(),s=this.getOwner(),i=s.type==="teams"?s:s.getTeam();return t===i},getAuthor(){return o.request("entities","clinicians:model",this.get("_author"))},getFlow(){if(this.get("_flow"))return o.request("entities","flows:model",this.get("_flow"))},getState(){return o.request("entities","states:model",this.get("_state"))},getProgram(){return o.request("entities","programs:model",this.get("_program"))},getPreviousState(){return o.request("entities","states:model",this.previous("_state"))},isLocked(){return!!this.get("locked_at")},isDone(){return this.getState().isDone()},isFlowDone(){const e=this.getFlow();return e&&e.isDone()},isOverdue(){if(this.isDone())return!1;const e=this.get("due_date"),t=this.get("due_time");if(!t)return y(e).isBefore(y(),"day");const s=y(`${e} ${t}`);return s.isBefore(y(),"day")||s.isBefore(y(),"minute")},hasOutreach(){return this.get("outreach")!==Y.DISABLED},hasSharing(){return this.get("sharing")!==P.DISABLED},canEdit(){const e=o.request("bootstrap","currentUser");return!!(e.can("work:manage")||e.can("work:owned:manage")&&this.getOwner()===e||e.can("work:team:manage")&&this.isSameTeamAsUser())},canSubmit(){const e=o.request("bootstrap","currentUser");return!!(e.can("work:submit")||e.can("work:owned:submit")&&this.getOwner()===e||e.can("work:team:submit")&&this.isSameTeamAsUser())},canDelete(){if(!this.canEdit())return!1;const e=o.request("bootstrap","currentUser");return!!(e.can("work:delete")||e.can("work:owned:delete")&&this.getOwner()===e||e.can("work:authored:delete")&&this.getAuthor()===e)},saveDueDate(e){return e?this.save({due_date:e.format("YYYY-MM-DD")}):this.save({due_date:null,due_time:null})},saveDueTime(e){return e?this.save({due_time:e}):this.save({due_time:null})},saveState(e){const t={_state:e.id},s=this.get("sharing");return e.isDone()&&![P.DISABLED,P.RESPONDED].includes(s)&&(t.sharing=P.CANCELED),this.save(t,{relationships:{state:this.toRelation(e)}})},saveOwner(e){return this.save({_owner:e},{relationships:{owner:this.toRelation(e)}})},saveAll(e){this.isNew()&&(e=_({},this.attributes,e));const t={flow:this.toRelation(e._flow,"flows"),form:this.toRelation(e._form,"forms"),owner:this.toRelation(e._owner),state:this.toRelation(e._state,"states"),"program-action":this.toRelation(e._program_action,"program-actions")};return this.save(e,{relationships:t},{wait:!0})},hasAttachments(){return!!v(this.get("_files"))},hasAllowedUploads(){if(!this.canEdit())return!1;const e=o.request("entities","programActions:model",this.get("_program_action"));return!!v(e.get("allowed_uploads"))},parseRelationship:re}),ce=l(ae,ne),le=c.extend({url:"/api/actions",model:ce,parseRelationship:re,save(e){const t=this.invoke("saveAll",e);return Promise.all(t)},groupByDate(){const e=this.groupBy("due_date");return te(xt(e),(t,s)=>(t.add({date:s,actions:new le(e[s])}),t),new Z.Collection([]))}}),Jt=r.extend({Entity:{_Model:ae,Model:ce,Collection:le},radioRequests:{"actions:model":"getModel","actions:collection":"getCollection","fetch:actions:model":"fetchAction","fetch:actions:collection":"fetchCollection","fetch:actions:withResponses":"fetchActionWithResponses","fetch:actions:collection:byPatient":"fetchActionsByPatient","fetch:actions:collection:byFlow":"fetchActionsByFlow"},fetchAction(e){const t=["program-action.program","flow.program-flow.program"].join();return this.fetchModel(e,{data:{include:t}})},fetchActionWithResponses(e){const t={include:["form-responses"],fields:{"form-responses":["status","updated_at","editor"]}};return this.fetchModel(e,{data:t})},fetchActionsByPatient({patientId:e,filter:t}){const s={filter:t},i=`/api/patients/${e}/relationships/actions`;return this.fetchCollection({url:i,data:s})},fetchActionsByFlow(e){const t=`/api/flows/${e}/relationships/actions`;return this.fetchCollection({url:t})}});new Jt;const de="clinicians",he=a.extend({type:de,urlRoot:"/api/clinicians",preinitialize(){this.on("change:_team",this.onChangeTeam)},validate(e){if(!$(e.name))return"A clinician name is required";if(!$(e.email))return"A clinician email address is required";if(!e._role)return"A clinician role is required"},onChangeTeam(){const e=o.request("entities","teams:model",this.previous("_team"));e.set("_clinicians",O(e.get("_clinicians"),{id:this.id}));const t=o.request("entities","teams:model",this.get("_team"));t.set("_clinicians",N(t.get("_clinicians"),[{id:this.id}]))},getWorkspaces(){return o.request("entities","workspaces:collection",this.get("_workspaces"))},addWorkspace(e){const t=this.getWorkspaces();t.add(e),this.set("_workspaces",this.toRelation(t,"workspaces").data)},removeWorkspace(e){const t=this.getWorkspaces();t.remove(e),this.set("_workspaces",this.toRelation(t,"workspaces").data)},getTeam(){return o.request("entities","teams:model",this.get("_team"))},hasTeam(){const e=this.get("_team");return e&&e!==oe},getRole(){return o.request("entities","roles:model",this.get("_role"))},can(e){const s=this.getRole().get("permissions");return ee(s,e)},saveRole(e){return this.save({_role:e.id},{relationships:{role:this.toRelation(e)}})},saveTeam(e){return this.save({_team:e.id},{relationships:{team:this.toRelation(e)}})},saveAll(e){e=_({},this.attributes,e);const t={workspaces:this.toRelation(e._workspaces,"workspaces"),team:this.toRelation(e._team,"teams"),role:this.toRelation(e._role,"roles")};return this.save(e,{relationships:t},{wait:!0})},getInitials(){const e=String(this.get("name")).split(" ");return e.length===1?A(e).charAt(0):`${A(e).charAt(0)}${Tt(e).charAt(0)}`},isEditable(){return!this.get("last_active_at")},isActive(){const e=this.hasTeam(),t=!!v(this.get("_workspaces")),s=this.get("last_active_at");return e&&t&&s}}),ue=l(he,de),jt=c.extend({url:"/api/clinicians",model:ue,comparator:"name",filterAssignable(){const e=this.clone(),t=this.filter(s=>s.isActive()&&s.get("enabled")&&s.can("work:own"));return e.reset(t),e}}),Gt=r.extend({Entity:{_Model:he,Model:ue,Collection:jt},radioRequests:{"clinicians:model":"getModel","clinicians:collection":"getCollection","fetch:clinicians:collection":"fetchCollection","fetch:clinicians:current":"fetchCurrentClinician","fetch:clinicians:model":"fetchModel","fetch:clinicians:byWorkspace":"fetchByWorkspace"},fetchCurrentClinician(){return this.fetchBy("/api/clinicians/me").then(e=>(qt(e.pick("id","name","email")),e))},fetchByWorkspace(e){const t=`/api/workspaces/${e}/relationships/clinicians`,s=o.request("entities","workspaces:model",e);return this.fetchCollection({url:t}).then(i=>{s.updateClinicians(i)})}});new Gt;const fe="comments",pe=a.extend({type:fe,urlRoot(){return this.isNew()?`/api/actions/${this.get("_action")}/relationships/comments`:"/api/comments"},validate({message:e}){if(!$(e))return"Comment message required."},getClinician(){return o.request("entities","clinicians:model",this.get("_clinician"))}}),ge=l(pe,fe),Qt=c.extend({model:ge}),zt=r.extend({Entity:{_Model:pe,Model:ge,Collection:Qt},radioRequests:{"comments:model":"getModel","fetch:comments:collection:byAction":"fetchCommentsByAction"},fetchCommentsByAction(e){const t=`/api/actions/${e}/relationships/comments`;return this.fetchCollection({url:t})}});new zt;const me="dashboards",we=a.extend({type:me,urlRoot:"/api/dashboards"}),_e=l(we,me),Xt=c.extend({url:"/api/dashboards",model:_e}),Kt=r.extend({Entity:{_Model:we,Model:_e,Collection:Xt},radioRequests:{"dashboards:model":"getModel","dashboards:collection":"getCollection","fetch:dashboards:model":"fetchModel","fetch:dashboards:collection":"fetchCollection"}});new Kt;const Zt="directories",W=a.extend({type:Zt,url(){return`/api/directory/${this.get("slug")}`},getOptions(){if(this.options)return this.options;const e=J(this.get("value"),t=>({name:t,id:t}));return this.options=new c(e),this.options}}),es=c.extend({url:"/api/directories",model:W}),ts=r.extend({Entity:{Model:W,Collection:es},radioRequests:{"directories:collection":"getCollection","fetch:directories:model":"fetchDirectory","fetch:directories:filterable":"fetchFilterable"},fetchDirectory(e,t){return new W({slug:e}).fetch({data:t})},fetchFilterable(){const e={filter:{filterable:!0}};return this.fetchCollection({data:e})}});new ts;const ye="events",$e=a.extend({type:ye,getClinician(){return o.request("entities","clinicians:model",this.get("_clinician"))},getRecipient(){if(this.get("_recipient"))return o.request("entities","patients:model",this.get("_recipient"))},getEditor(){return this.get("_editor")?o.request("entities","clinicians:model",this.get("_editor")):o.request("entities","clinicians:model",{name:"RoundingWell"})},getTeam(){return o.request("entities","teams:model",this.get("_team"))},getState(){return o.request("entities","states:model",this.get("_state"))},getProgram(){if(this.get("_program"))return o.request("entities","programs:model",this.get("_program"))},getForm(){if(this.get("_form"))return o.request("entities","forms:model",this.get("_form"))}}),ve=l($e,ye),ss=c.extend({model:ve}),os=r.extend({Entity:{_Model:$e,Model:ve,Collection:ss},radioRequests:{"events:model":"getModel","events:collection":"getCollection","fetch:actionEvents:collection":"fetchActionEvents","fetch:flowEvents:collection":"fetchFlowEvents"},fetchActionEvents(e){return this.fetchCollection({url:`/api/actions/${e}/activity`})},fetchFlowEvents(e){return this.fetchCollection({url:`/api/flows/${e}/activity`})}});new os;const Ae="files";function is(e){const t=e.lastIndexOf(".");return`${e.slice(0,t)}-copy${e.slice(t)}`}const Re=a.extend({defaults:{path:"",_progress:0},type:Ae,urlRoot(){return this.isNew()?`/api/actions/${this.get("_action")}/relationships/files?urls=upload`:"/api/files"},fetchFile(){return this.fetch({url:`${this.url()}?urls=download,view`})},createUpload(e){const t=`patient/${this.get("_patient")}/${e}`;return this.save({path:t,_progress:0},{},{type:"PUT"}).catch(({responseData:i}={})=>{if(j(A(i.errors),"detail","").includes("Another file exists"))return this.createUpload(is(e));throw i})},upload(e){this.createUpload(e.name).then(()=>this.putFile(e)).then(()=>this.fetchFile()).catch(()=>{this.trigger("upload:failed"),this.destroy()})},putFile(e){const t=e.size;return new Promise((s,i)=>{const n=new XMLHttpRequest;n.onreadystatechange=()=>{if(n.readyState===4){if(n.status!==200){i();return}this.set({_progress:100}),s()}},n.upload.onprogress=d=>{d.lengthComputable&&this.set({_progress:Math.round(d.loaded/t*100)})},n.open("PUT",this.get("_upload")),n.send(e)})},getFilename(){return this.get("path").split("/").pop()}}),Ee=l(Re,Ae),ns=c.extend({model:Ee}),rs=r.extend({Entity:{_Model:Re,Model:Ee,Collection:ns},radioRequests:{"files:model":"getModel","fetch:files:collection:byAction":"fetchFilesByAction"},fetchFilesByAction(e){const t=`/api/actions/${e}/relationships/files`,s={urls:["download","view"]};return this.fetchCollection({url:t,data:s})}});new rs;const Ce="flows",{parseRelationship:as}=R,Me=function(e,t){return!e||t==="owner"?e:as(e,t)},xe=a.extend({urlRoot(){return this.isNew()?`/api/patients/${this.get("_patient")}/relationships/flows`:"/api/flows"},type:Ce,getPatient(){return o.request("entities","patients:model",this.get("_patient"))},getOwner(){const e=this.get("_owner");return o.request("entities",`${e.type}:model`,e.id)},getAuthor(){return o.request("entities","clinicians:model",this.get("_author"))},getState(){return o.request("entities","states:model",this.get("_state"))},getProgramFlow(){return o.request("entities","programFlows:model",this.get("_program_flow"))},getProgram(){return o.request("entities","programs:model",this.get("_program"))},isDone(){return this.getState().isDone()},isAllDone(){const{complete:e,total:t}=this.get("_progress");return e===t},canEdit(){const e=o.request("bootstrap","currentUser");if(e.can("work:manage")||e.can("work:owned:manage")&&this.getOwner()===e)return!0;if(e.can("work:team:manage")){const t=this.getOwner(),s=e.getTeam(),i=t.type==="teams"?t:t.getTeam();if(s===i)return!0}return!1},canDelete(){if(!this.canEdit())return!1;const e=o.request("bootstrap","currentUser");return!!(e.can("work:delete")||e.can("work:owned:delete")&&this.getOwner()===e||e.can("work:authored:delete")&&this.getAuthor()===e)},saveState(e){return this.save({_state:e.id},{relationships:{state:this.toRelation(e)}})},saveOwner(e){return this.save({_owner:e},{relationships:{owner:this.toRelation(e)}})},applyOwner(e){const t=`${this.url()}/relationships/actions`,s={owner:this.toRelation(e)};return this.save({},{relationships:s},{url:t})},saveAll(e){this.isNew()&&(e=_({},this.attributes,e));const t={state:this.toRelation(e._state,"states"),owner:this.toRelation(e._owner),"program-flow":this.toRelation(e._program_flow,"program-flows")};return this.save(e,{relationships:t},{wait:!0})},parseRelationship:Me}),Te=l(xe,Ce),cs=c.extend({url:"/api/flows",model:Te,parseRelationship:Me,save(e){const t=this.invoke("saveAll",e);return Promise.all(t)},applyOwner(e){const t=this.invoke("applyOwner",e);return Promise.all(t)}}),ls=r.extend({Entity:{_Model:xe,Model:Te,Collection:cs},radioRequests:{"flows:model":"getModel","flows:collection":"getCollection","fetch:flows:model":"fetchFlow","fetch:flows:collection":"fetchCollection","fetch:flows:collection:byPatient":"fetchFlowsByPatient"},fetchFlow(e){const t=["program-flow","program-flow.program","program-flow.program-actions"].join();return this.fetchModel(e,{data:{include:t}})},fetchFlowsByPatient({patientId:e,filter:t}){const s={filter:t},i=`/api/patients/${e}/relationships/flows`;return this.fetchCollection({url:i,data:s})}});new ls;function qe(e,t){return e==="desc"?t*-1:t}function ds(e,t,s,i=""){return t||(t=i),s||(s=i),qe(e,t.localeCompare(s))}function z(e,t=-1){return Pt(e)?e:t}function Qs(e,t,s,i=Number.NEGATIVE_INFINITY){t||(t=i),s||(s=i);const n=z(t,i)>z(s,i)?1:-1;return qe(e,n)}const Pe="form-responses",{parseRelationship:hs}=R,be=function(e,t){return t==="editor"?e:hs(e,t)},ke=a.extend({type:Pe,urlRoot:"/api/form-responses",saveAll(){const e=this.attributes,t={form:this.toRelation(e._form,"forms"),patient:this.toRelation(e._patient,"patients"),action:this.toRelation(e._action,"patient-actions")};return this.save(e,{relationships:t},{wait:!0})},getDraft(){if(this.get("status")===L.DRAFT)return{updated:this.get("updated_at"),submission:this.getResponse()}},getResponse(){return j(this.get("response"),"data",{})},getFormData(){return bt(this.get("response"),"data")},parseRelationship:be}),k=l(ke,Pe),us=c.extend({url:"/api/form-responses",model:k,parseRelationship:be,comparator(e,t){return ds("desc",e.get("updated_at"),t.get("updated_at"))},getFirstSubmission(){return this.find({status:L.SUBMITTED})},filterSubmissions(){const e=this.clone(),t=this.filter({status:L.SUBMITTED});return e.reset(t),e}}),fs=r.extend({Entity:{_Model:ke,Model:k,Collection:us},radioRequests:{"formResponses:model":"getModel","formResponses:collection":"getCollection","fetch:formResponses:model":"fetchFormResponse","fetch:formResponses:latest":"fetchLatestResponse"},fetchFormResponse(e,t){return e?this.fetchModel(e,t):new k},fetchLatestResponse(e){const t=te(e,(s,i,n)=>(i&&(s.filter[n]=i),s),{filter:{}});return this.fetchBy("/api/form-responses/latest",{data:t}).then(s=>s||new k)}});new fs;const ps=r.extend({radioRequests:{"fetch:icd":"fetchIcd"},fetchIcd({term:e,prefixes:t}){return Ct("/api/graphql",{header:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({query:`query ($term: String!, $prefixes: [String!]) {
      icdCodes(term: $term, prefixes: $prefixes) {
        code
        description
        hcc_v24
        hcc_v28
        isSpecific
        parent {
          code
          description
        }
        children {
          code
          description
        }
      }
    }`,variables:{term:e,prefixes:t}})}).then(Mt)}});new ps;const Se="patient-fields",De=a.extend({type:Se,url(){return`/api/patients/${this.get("_patient")}/fields/${this.get("name")}`},isNew(){return!1},saveAll(e){e=_({},this.attributes,e),e.id||this.set({id:S(`resource:field:${e.name.toLowerCase()}`,e._patient)});const t={patient:this.toRelation(e._patient,"patients")};return this.save(e,{relationships:t},{wait:!0})}}),Ue=l(De,Se),gs=c.extend({model:Ue}),ms=r.extend({Entity:{_Model:De,Model:Ue,Collection:gs},radioRequests:{"patientFields:model":"getModel","patientFields:collection":"getCollection"}});new ms;const Be="patients",Fe=a.extend({type:Be,url(){if(this.isNew())return"/api/patients";const e=o.request("workspace","current");return`/api/patients/${this.id}?filter[workspace]=${e.id}`},validate({first_name:e,last_name:t,birth_date:s,sex:i}){const n={};if((!e||!t)&&(n.name="required"),i||(n.sex="required"),s?y(s).isAfter()&&(n.birth_date="invalidDate"):n.birth_date="required",!se(n))return n},getWorkspaces(){return o.request("entities","workspaces:collection",this.get("_workspaces"))},getFields(){return o.request("entities","patientFields:collection",this.get("_patient_fields"))},getField(e){return this.getFields().find({name:e})},saveAll(e){e=_({},this.attributes,e);const t={wait:!0};return this.isNew()&&(t.type="PUT"),this.save(e,{},t)},canEdit(){return this.isNew()||this.get("source")==="manual"},getSortName(){return(this.get("last_name")+this.get("first_name")).toLowerCase()},getWorkspacePatient(){return o.request("entities","get:workspacePatients:model",this.id)},toggleActiveStatus(){const e=this.getWorkspacePatient(),s=e.get("status")!==b.ACTIVE?b.ACTIVE:b.INACTIVE;e.saveAll({status:s})},setArchivedStatus(){o.request("entities","get:workspacePatients:model",this.id).saveAll({status:b.ARCHIVED})}}),Ie=l(Fe,Be),ws=c.extend({url:"/api/patients",model:Ie}),_s=r.extend({Entity:{_Model:Fe,Model:Ie,Collection:ws},radioRequests:{"patients:model":"getModel","patients:collection":"getCollection","fetch:patients:model":"fetchModel","fetch:patients:model:byAction":"fetchPatientByAction","fetch:patients:model:byFlow":"fetchPatientByFlow"},fetchPatientByAction(e){return this.fetchBy(`/api/actions/${e}/patient`)},fetchPatientByFlow(e){return this.fetchBy(`/api/flows/${e}/patient`)}});new _s;const ys="patients-search-results",Oe=a.extend({type:ys}),$s=c.extend({url:"/api/patients",model:Oe,initialize(){this._debouncedSearch=kt(this._debouncedSearch,150)},prevSearch:"",controller:new AbortController,search(e=""){if(e.length<3){(!e.length||!this.prevSearch.includes(e))&&(delete this._hasIdentifiers,this.reset(),this.prevSearch=""),this._debouncedSearch.cancel(),this.controller.abort();return}this.prevSearch=e,this.isSearching=!0,this._debouncedSearch(e)},hasIdentifiers(){return St(this._hasIdentifiers)?this._hasIdentifiers:(this._hasIdentifiers=!!this.find(e=>j(e.get("identifiers"),"length")),this._hasIdentifiers)},_debouncedSearch(e){const t={search:e};delete this._hasIdentifiers,this.controller.abort(),this.controller=new AbortController;const s=this.fetch({data:{filter:t},signal:this.controller.signal});this.fetcher=s,s.then(()=>{this.fetcher===s&&(this.isSearching=!1,this.trigger("search",this))})}}),vs=r.extend({Entity:{Model:Oe,Collection:$s},radioRequests:{"searchPatients:collection":"getCollection"}});new vs;const Ne=(e,t)=>J(e,function(s){return Dt([t],[s])}),Ye="program-actions",{parseRelationship:As}=R,Le=function(e,t){return!e||t==="owner"?e:As(e,t)},We=a.extend({urlRoot:"/api/program-actions",type:Ye,validate({name:e}){if(!$(e))return"Action name required"},getTags(){return o.request("entities","tags:collection",Ne(this.get("tags"),"text"))},addTag(e){const t=this.getTags();return t.add(e),this.save({tags:t.map("text")})},removeTag(e){const t=this.getTags();return t.remove(e),this.save({tags:t.map("text")})},getAction({patientId:e,flowId:t}){const s=o.request("bootstrap","currentUser"),n=o.request("workspace","current").getStates(),d=A(n.filter({status:G.QUEUED}));return o.request("entities","actions:model",{name:this.get("name"),_flow:t,_patient:e,_state:d.id,_owner:this.get("_owner")||{id:s.id,type:"clinicians"},_program_action:this.id})},enableAttachmentUploads(){this.save({allowed_uploads:["pdf"]})},disableAttachmentUploads(){this.save({allowed_uploads:[]})},getOwner(){const e=this.get("_owner");if(e)return o.request("entities","teams:model",e.id)},saveOwner(e){return e=this.toRelation(e),this.save({_owner:e.data},{relationships:{owner:e}})},getForm(){const e=this.get("_form");if(e)return o.request("entities","forms:model",e)},hasOutreach(){return this.get("outreach")!==Y.DISABLED},isVisibleToCurrentUser(){const e=this.get("_teams"),s=o.request("bootstrap","currentUser").getTeam();return v(e)?!!e.find(i=>i.id===s.id):!0},saveForm(e){e=this.toRelation(e);const t={_form:e.data};return e.data||(t.outreach=Y.DISABLED),this.save(t,{relationships:{form:e}})},saveAll(e){e=_({},this.attributes,e);const t={owner:this.toRelation(e._owner,"teams"),form:this.toRelation(e._form,"forms"),"program-flow":this.toRelation(e._program_flow,"program-flows"),program:this.toRelation(e._program,"programs")};return this.save(e,{relationships:t},{wait:!0})},parseRelationship:Le}),Ve=l(We,Ye),X=c.extend({initialize(e,t={}){this.flowId=t.flowId,this.flowId&&(this.comparator="sequence")},url(){return this.flowId?`/api/program-flows/${this.flowId}/actions`:"/api/program-actions"},model:Ve,parseRelationship:Le,updateSequences(){const e=this.map((t,s)=>(t.set({sequence:s}),t.toJSONApi({sequence:s})));return this.sync("patch",this,{url:this.url(),data:JSON.stringify({data:e})})},filterAddable(){const e=this.clone(),t=this.filter(s=>{const i=!!s.get("published_at"),n=!!s.get("archived_at"),d=s.get("behavior")===D.AUTOMATED,h=s.isVisibleToCurrentUser();return i&&!n&&!d&&h});return e.reset(t),e}}),Rs=r.extend({Entity:{_Model:We,Model:Ve,Collection:X},radioRequests:{"programActions:model":"getModel","programActions:collection":"getCollection","fetch:programActions:model":"fetchModel","fetch:programActions:collection:byProgram":"fetchProgramActionsByProgram","fetch:programActions:collection":"fetchProgramActions","fetch:programActions:collection:byProgramFlow":"fetchProgramActionsByFlow"},fetchProgramActionsByProgram({programId:e}){const t=`/api/programs/${e}/relationships/actions`;return this.fetchCollection({url:t})},fetchProgramActions(e=D.STANDARD){return new this.Entity.Collection().fetch({data:{filter:{behavior:e}}})},fetchProgramActionsByFlow(e,t){return new X([],{flowId:e}).fetch(t)}});new Rs;const He="program-flows",{parseRelationship:Es}=R,Je=function(e,t){return!e||t==="owner"?e:Es(e,t)},je=a.extend({urlRoot(){return this.isNew()?`/api/programs/${this.get("_program")}/relationships/flows`:"/api/program-flows"},type:He,validate({name:e}){if(!$(e))return"Flow name required"},getTags(){return o.request("entities","tags:collection",Ne(this.get("tags"),"text"))},addTag(e){const t=this.getTags();return t.add(e),this.save({tags:t.map("text")})},removeTag(e){const t=this.getTags();return t.remove(e),this.save({tags:t.map("text")})},getOwner(){const e=this.get("_owner");if(e)return o.request("entities","teams:model",e.id)},getFlow(e){const s=o.request("workspace","current").getStates(),i=A(s.filter({status:G.QUEUED}));return o.request("entities","flows:model",{_patient:e,_program_flow:this.get("id"),_state:i.id})},saveOwner(e){return e=this.toRelation(e),this.save({_owner:e.data},{relationships:{owner:e}})},saveAll(e){e=_({},this.attributes,e);const t={owner:this.toRelation(e._owner,"teams")};return this.save(e,{relationships:t},{wait:!0})},getActions(){return o.request("entities","programActions:collection",this.get("_program_actions"),{flowId:this.id})},getAddableActions(){return this.getActions().filterAddable()},isVisibleToCurrentUser(){const e=this.get("_teams"),s=o.request("bootstrap","currentUser").getTeam();return v(e)?!!e.find(i=>i.id===s.id):!0},parseRelationship:Je}),Ge=l(je,He),Cs=c.extend({url:"/api/program-flows",model:Ge,parseRelationship:Je,filterAddable(){const e=this.clone(),t=this.filter(s=>{const i=!!s.get("published_at"),n=!!s.get("archived_at"),d=s.get("behavior")===D.AUTOMATED,h=s.isVisibleToCurrentUser();return i&&!n&&!d&&h});return e.reset(t),e}}),Ms=r.extend({Entity:{_Model:je,Model:Ge,Collection:Cs},radioRequests:{"programFlows:model":"getModel","programFlows:collection":"getCollection","fetch:programFlows:model":"fetchModel","fetch:programFlows:collection:byProgram":"fetchProgramFlowsByProgram","fetch:programFlows:collection":"fetchProgramFlows"},fetchProgramFlowsByProgram({programId:e}){const t=`/api/programs/${e}/relationships/flows`;return this.fetchCollection({url:t})},fetchProgramFlows(e=D.STANDARD){return new this.Entity.Collection().fetch({data:{filter:{behavior:e}}})}});new Ms;const Qe="programs",ze=a.extend({type:Qe,validate({name:e}){if(!$(e))return"Program name required"},urlRoot:"/api/programs",getAddable(){const e=o.request("entities","programActions:collection",this.get("_program_actions")),t=o.request("entities","programFlows:collection",this.get("_program_flows")),s=e.filterAddable(),i=t.filterAddable();return new Z.Collection([...i.models,...s.models],{comparator:"name"})},getUserWorkspaces(){const t=o.request("bootstrap","currentUser").getWorkspaces(),s=o.request("entities","workspaces:collection",this.get("_workspaces"));return s.reset(s.filter(i=>t.get(i.id))),s}}),Xe=l(ze,Qe),xs=c.extend({url:"/api/programs",model:Xe}),Ts=r.extend({Entity:{_Model:ze,Model:Xe,Collection:xs},radioRequests:{"programs:model":"getModel","programs:collection":"getCollection","fetch:programs:model":"fetchModel","fetch:programs:collection":"fetchCollection","fetch:programs:model:byProgramFlow":"fetchProgramByProgramFlow","fetch:programs:byWorkspace":"fetchProgramsByWorkspace"},fetchProgramByProgramFlow(e){return this.fetchBy(`/api/program-flows/${e}/program`)},fetchProgramsByWorkspace(e){const t=`/api/workspaces/${e}/relationships/programs`;return this.fetchCollection({url:t})}});new Ts;const Ke="roles",Ze=a.extend({type:Ke,urlRoot:"/api/roles"}),et=l(Ze,Ke),qs=c.extend({url:"/api/roles",model:et}),Ps=r.extend({Entity:{_Model:Ze,Model:et,Collection:qs},radioRequests:{"roles:model":"getModel","roles:collection":"getCollection","fetch:roles:collection":"fetchCollection"}});new Ps;const tt="settings",st=a.extend({type:tt,urlRoot:"/api/settings"}),ot=l(st,tt),bs=c.extend({url:"/api/settings",model:ot}),ks=r.extend({Entity:{_Model:st,Model:ot,Collection:bs},radioRequests:{"settings:model":"getModel","fetch:settings:collection":"fetchCollection"}});new ks;const it="states",nt=a.extend({type:it,isDone(){return this.get("status")===G.DONE}}),rt=l(nt,it),V=c.extend({url:"/api/states",model:rt,comparator:"sequence",groupByDone(){const{done:e,notDone:t}=this.groupBy(s=>s.isDone()?"done":"notDone");return{done:new V(e),notDone:new V(t)}},getFilterIds(){return this.map("id").join(",")}}),Ss=r.extend({Entity:{_Model:nt,Model:rt,Collection:V},radioRequests:{"states:model":"getModel","states:collection":"getCollection","fetch:states:collection":"fetchCollection"}});new Ss;const at="tags",ct=a.extend({type:at,idAttribute:"text"}),lt=l(ct,at),Ds=c.extend({url:"/api/tags",model:lt,parse(e){return J(e.data,t=>({text:t}))},comparator:"text"});let I;const Us=r.extend({Entity:{_Model:ct,Model:lt,Collection:Ds},radioRequests:{"tags:model":"getModel","tags:collection":"getCollection","fetch:tags:collection":"fetchTags"},fetchTags(){return I||this.fetchCollection().then(e=>(I=e,e))}});new Us;const dt="teams",ht=a.extend({type:dt,urlRoot:"/api/teams",getAssignableClinicians(){return o.request("entities","clinicians:collection",this.get("_clinicians")).filterAssignable()}}),ut=l(ht,dt),Bs=c.extend({url:"/api/teams",model:ut,comparator:"name"}),Fs=r.extend({Entity:{_Model:ht,Model:ut,Collection:Bs},radioRequests:{"teams:model":"getModel","teams:collection":"getCollection","fetch:teams:collection":"fetchCollection"}});new Fs;const ft="widget-values",pt=a.extend({type:ft}),H=l(pt,ft);c.extend({model:H});const Is=r.extend({Entity:{_Model:pt,Model:H},radioRequests:{"get:widgetValues:model":"getByPatient","fetch:widgetValues:byPatient":"fetchByPatient"},fetchByPatient(e,t){const s=this.getByPatient(e.get("slug"),t),i=e.get("values");if(se(i))return s;const n={filter:{patient:t}};return s.fetch({url:`/api/widgets/${e.get("slug")}/values`,data:n})},getByPatient(e,t){return ie(t)||(t=S(t,oe)),new H({id:S(e,t),name:e})}});new Is;const gt="widgets",mt=a.extend({type:gt,fetchValues(e){return o.request("entities","fetch:widgetValues:byPatient",this,e)}}),wt=l(mt,gt),Os=c.extend({url:"/api/widgets",model:wt,modelId(e){return Ut(`${e.slug}-`)}}),Ns=r.extend({Entity:{_Model:mt,Model:wt,Collection:Os},radioRequests:{"widgets:model":"getModel","widgets:collection":"getCollection","fetch:widgets:collection":"fetchWidgets"},fetchWidgets({filter:e={}}={}){const t={filter:e};return this.fetchCollection({data:t})}});new Ns;const _t="workspace-patients",yt=a.extend({type:_t,urlRoot:"/api/workspace-patients",saveAll(e){const t={type:"PUT"},s={workspace:this.toRelation(this.get("_workspace"),"workspaces"),patient:this.toRelation(this.get("_patient"),"patients")};this.save(e,{relationships:s},t)},canEdit(){return o.request("bootstrap","currentUser").can("patients:manage")}}),K=l(yt,_t),Ys=r.extend({Entity:{_Model:yt,Model:K},radioRequests:{"get:workspacePatients:model":"getByPatient","fetch:workspacePatients:byPatient":"fetchByPatient"},fetchByPatient(e){return this.getByPatient(e).fetch()},getByPatient(e){const s=o.request("workspace","current").id;return new K({id:S(e,s),_patient:e,_workspace:s})}});new Ys;const $t="workspaces",vt=a.extend({type:$t,urlRoot:"/api/workspaces",getStates(){return o.request("entities","states:collection",this.get("_states"))},getForms(){return o.request("entities","forms:collection",this.get("_forms"))},getAssignableClinicians(){return o.request("entities","clinicians:collection",this.get("_clinicians")).filterAssignable()},updateClinicians(e){this.set("_clinicians",e.map(t=>Bt(t,"id","type")))},addClinician(e){const t=`/api/workspaces/${this.id}/relationships/clinicians`,s=e.get("_workspaces");return e.set({_workspaces:N(s,[{id:this.id}])}),this.set({_clinicians:N(this.get("_clinicians"),[{id:e.id}])}),this.sync("create",this,{url:t,data:JSON.stringify({data:[{id:e.id,type:e.type}]})})},removeClinician(e){const t=`/api/workspaces/${this.id}/relationships/clinicians`;return e.set({_workspaces:O(e.get("_workspaces"),{id:this.id})}),this.set({_clinicians:O(this.get("_clinicians"),{id:e.id})}),this.sync("delete",this,{url:t,data:JSON.stringify({data:[{id:e.id,type:e.type}]})})}}),At=l(vt,$t),Ls=c.extend({url:"/api/workspaces",model:At,comparator:"name"}),Ws=r.extend({Entity:{_Model:vt,Model:At,Collection:Ls},radioRequests:{"workspaces:model":"getModel","workspaces:collection":"getCollection","fetch:workspaces:collection":"fetchCollection"}});new Ws;export{P as A,L as F,oe as N,D as P,Gs as R,G as S,ds as a,Y as b,Ne as c,b as d,Qs as n};
