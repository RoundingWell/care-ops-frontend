{"version":3,"file":"sw.mjs","sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/_private/Deferred.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/clientsClaim.js","../node_modules/idb/build/wrap-idb-value.js","../node_modules/idb/build/index.js","../node_modules/workbox-background-sync/_version.js","../node_modules/workbox-background-sync/lib/QueueDb.js","../node_modules/workbox-background-sync/lib/QueueStore.js","../node_modules/workbox-background-sync/lib/StorableRequest.js","../node_modules/workbox-background-sync/Queue.js","../node_modules/workbox-background-sync/BackgroundSyncPlugin.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-strategies/CacheFirst.js","../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../node_modules/workbox-strategies/NetworkFirst.js","../node_modules/workbox-strategies/NetworkOnly.js","../node_modules/workbox-cacheable-response/_version.js","../node_modules/workbox-cacheable-response/CacheableResponse.js","../node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","../node_modules/workbox-precaching/cleanupOutdatedCaches.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-precaching/PrecacheFallbackPlugin.js","../src/js/sw.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:background-sync:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2021 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB } from 'idb';\nimport '../_version.js';\nconst DB_VERSION = 3;\nconst DB_NAME = 'workbox-background-sync';\nconst REQUEST_OBJECT_STORE_NAME = 'requests';\nconst QUEUE_NAME_INDEX = 'queueName';\n/**\n * A class to interact directly an IndexedDB created specifically to save and\n * retrieve QueueStoreEntries. This class encapsulates all the schema details\n * to store the representation of a Queue.\n *\n * @private\n */\nexport class QueueDb {\n    constructor() {\n        this._db = null;\n    }\n    /**\n     * Add QueueStoreEntry to underlying db.\n     *\n     * @param {UnidentifiedQueueStoreEntry} entry\n     */\n    async addEntry(entry) {\n        const db = await this.getDb();\n        const tx = db.transaction(REQUEST_OBJECT_STORE_NAME, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.add(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the first entry id in the ObjectStore.\n     *\n     * @return {number | undefined}\n     */\n    async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db\n            .transaction(REQUEST_OBJECT_STORE_NAME)\n            .store.openCursor();\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value.id;\n    }\n    /**\n     * Get all the entries filtered by index\n     *\n     * @param queueName\n     * @return {Promise<QueueStoreEntry[]>}\n     */\n    async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    /**\n     * Returns the number of entries filtered by index\n     *\n     * @param queueName\n     * @return {Promise<number>}\n     */\n    async getEntryCountByQueueName(queueName) {\n        const db = await this.getDb();\n        return db.countFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n    }\n    /**\n     * Deletes a single entry by id.\n     *\n     * @param {number} id the id of the entry to be deleted\n     */\n    async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'next');\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'prev');\n    }\n    /**\n     * Returns either the first or the last entries, depending on direction.\n     * Filtered by index.\n     *\n     * @param {IDBCursorDirection} direction\n     * @param {IDBKeyRange} query\n     * @return {Promise<QueueStoreEntry | undefined>}\n     * @private\n     */\n    async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db\n            .transaction(REQUEST_OBJECT_STORE_NAME)\n            .store.index(QUEUE_NAME_INDEX)\n            .openCursor(query, direction);\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value;\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb,\n            });\n        }\n        return this._db;\n    }\n    /**\n     * Upgrades QueueDB\n     *\n     * @param {IDBPDatabase<QueueDBSchema>} db\n     * @param {number} oldVersion\n     * @private\n     */\n    _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: 'id',\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, { unique: false });\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { QueueDb, } from './QueueDb.js';\nimport '../_version.js';\n/**\n * A class to manage storing requests from a Queue in IndexedDB,\n * indexed by their queue name for easier access.\n *\n * Most developers will not need to access this class directly;\n * it is exposed for advanced use cases.\n */\nexport class QueueStore {\n    /**\n     * Associates this instance with a Queue instance, so entries added can be\n     * identified by their queue name.\n     *\n     * @param {string} queueName\n     */\n    constructor(queueName) {\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    /**\n     * Append an entry last in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     */\n    async pushEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        // Don't specify an ID since one is automatically generated.\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Prepend an entry first in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     */\n    async unshiftEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            // Pick an ID one less than the lowest ID in the object store.\n            entry.id = firstId - 1;\n        }\n        else {\n            // Otherwise let the auto-incrementor assign the ID.\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Removes and returns the last entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     */\n    async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    /**\n     * Removes and returns the first entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     */\n    async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    /**\n     * Returns all entries in the store matching the `queueName`.\n     *\n     * @param {Object} options See {@link workbox-background-sync.Queue~getAll}\n     * @return {Promise<Array<Object>>}\n     */\n    async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    /**\n     * Returns the number of entries in the store matching the `queueName`.\n     *\n     * @param {Object} options See {@link workbox-background-sync.Queue~size}\n     * @return {Promise<number>}\n     */\n    async size() {\n        return await this._queueDb.getEntryCountByQueueName(this._queueName);\n    }\n    /**\n     * Deletes the entry for the given ID.\n     *\n     * WARNING: this method does not ensure the deleted entry belongs to this\n     * queue (i.e. matches the `queueName`). But this limitation is acceptable\n     * as this class is not publicly exposed. An additional check would make\n     * this method slower than it needs to be.\n     *\n     * @param {number} id\n     */\n    async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    /**\n     * Removes and returns the first or last entry in the queue (based on the\n     * `direction` argument) matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\nconst serializableProperties = [\n    'method',\n    'referrer',\n    'referrerPolicy',\n    'mode',\n    'credentials',\n    'cache',\n    'redirect',\n    'integrity',\n    'keepalive',\n];\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * Most developers will not need to access this class directly;\n * it is exposed for advanced use cases.\n */\nclass StorableRequest {\n    /**\n     * Converts a Request object to a plain object that can be structured\n     * cloned or JSON-stringified.\n     *\n     * @param {Request} request\n     * @return {Promise<StorableRequest>}\n     */\n    static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {},\n        };\n        // Set the body if present.\n        if (request.method !== 'GET') {\n            // Use ArrayBuffer to support non-text request bodies.\n            // NOTE: we can't use Blobs becuse Safari doesn't support storing\n            // Blobs in IndexedDB in some cases:\n            // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        // Convert the headers from an iterable to an object.\n        for (const [key, value] of request.headers.entries()) {\n            requestData.headers[key] = value;\n        }\n        // Add all other serializable request properties\n        for (const prop of serializableProperties) {\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    /**\n     * Accepts an object of request data that can be used to construct a\n     * `Request` but can also be stored in IndexedDB.\n     *\n     * @param {Object} requestData An object of request data that includes the\n     *     `url` plus any relevant properties of\n     *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.\n     */\n    constructor(requestData) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData',\n            });\n            assert.isType(requestData.url, 'string', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData.url',\n            });\n        }\n        // If the request's mode is `navigate`, convert it to `same-origin` since\n        // navigation requests can't be constructed via script.\n        if (requestData['mode'] === 'navigate') {\n            requestData['mode'] = 'same-origin';\n        }\n        this._requestData = requestData;\n    }\n    /**\n     * Returns a deep clone of the instances `_requestData` object.\n     *\n     * @return {Object}\n     */\n    toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    /**\n     * Converts this instance to a Request.\n     *\n     * @return {Request}\n     */\n    toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    /**\n     * Creates and returns a deep clone of the instance.\n     *\n     * @return {StorableRequest}\n     */\n    clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\nexport { StorableRequest };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { QueueStore } from './lib/QueueStore.js';\nimport { StorableRequest } from './lib/StorableRequest.js';\nimport './_version.js';\nconst TAG_PREFIX = 'workbox-background-sync';\nconst MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\nconst queueNames = new Set();\n/**\n * Converts a QueueStore entry into the format exposed by Queue. This entails\n * converting the request data into a real request and omitting the `id` and\n * `queueName` properties.\n *\n * @param {UnidentifiedQueueStoreEntry} queueStoreEntry\n * @return {Queue}\n * @private\n */\nconst convertEntry = (queueStoreEntry) => {\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp,\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof workbox-background-sync\n */\nclass Queue {\n    /**\n     * Creates an instance of Queue with the given options\n     *\n     * @param {string} name The unique name for this queue. This name must be\n     *     unique as it's used to register sync events and store requests\n     *     in IndexedDB specific to this instance. An error will be thrown if\n     *     a duplicate name is detected.\n     * @param {Object} [options]\n     * @param {Function} [options.onSync] A function that gets invoked whenever\n     *     the 'sync' event fires. The function is invoked with an object\n     *     containing the `queue` property (referencing this instance), and you\n     *     can use the callback to customize the replay behavior of the queue.\n     *     When not set the `replayRequests()` method is called.\n     *     Note: if the replay fails after a sync event, make sure you throw an\n     *     error, so the browser knows to retry the sync event later.\n     * @param {number} [options.maxRetentionTime=7 days] The amount of time (in\n     *     minutes) a request may be retried. After this amount of time has\n     *     passed, the request will be deleted from the queue.\n     * @param {boolean} [options.forceSyncFallback=false] If `true`, instead\n     *     of attempting to use background sync events, always attempt to replay\n     *     queued request at service worker startup. Most folks will not need\n     *     this, unless you explicitly target a runtime like Electron that\n     *     exposes the interfaces for background sync, but does not have a working\n     *     implementation.\n     */\n    constructor(name, { forceSyncFallback, onSync, maxRetentionTime } = {}) {\n        this._syncInProgress = false;\n        this._requestsAddedDuringSync = false;\n        // Ensure the store name is not already being used\n        if (queueNames.has(name)) {\n            throw new WorkboxError('duplicate-queue-name', { name });\n        }\n        else {\n            queueNames.add(name);\n        }\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n        this._forceSyncFallback = Boolean(forceSyncFallback);\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    /**\n     * @return {string}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the end of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async pushRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'push');\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the beginning of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async unshiftRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'unshift');\n    }\n    /**\n     * Removes and returns the last request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async popRequest() {\n        return this._removeRequest('pop');\n    }\n    /**\n     * Removes and returns the first request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async shiftRequest() {\n        return this._removeRequest('shift');\n    }\n    /**\n     * Returns all the entries that have not expired (per `maxRetentionTime`).\n     * Any expired entries are removed from the queue.\n     *\n     * @return {Promise<Array<QueueEntry>>}\n     */\n    async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            }\n            else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    /**\n     * Returns the number of entries present in the queue.\n     * Note that expired entries (per `maxRetentionTime`) are also included in this count.\n     *\n     * @return {Promise<number>}\n     */\n    async size() {\n        return await this._queueStore.size();\n    }\n    /**\n     * Adds the entry to the QueueStore and registers for a sync event.\n     *\n     * @param {Object} entry\n     * @param {Request} entry.request\n     * @param {Object} [entry.metadata]\n     * @param {number} [entry.timestamp=Date.now()]\n     * @param {string} operation ('push' or 'unshift')\n     * @private\n     */\n    async _addRequest({ request, metadata, timestamp = Date.now() }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp,\n        };\n        // Only include metadata if it's present.\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        switch (operation) {\n            case 'push':\n                await this._queueStore.pushEntry(entry);\n                break;\n            case 'unshift':\n                await this._queueStore.unshiftEntry(entry);\n                break;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Request for '${getFriendlyURL(request.url)}' has ` +\n                `been added to background sync queue '${this._name}'.`);\n        }\n        // Don't register for a sync if we're in the middle of a sync. Instead,\n        // we wait until the sync is complete and call register if\n        // `this._requestsAddedDuringSync` is true.\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        }\n        else {\n            await this.registerSync();\n        }\n    }\n    /**\n     * Removes and returns the first or last (depending on `operation`) entry\n     * from the QueueStore that's not older than the `maxRetentionTime`.\n     *\n     * @param {string} operation ('pop' or 'shift')\n     * @return {Object|undefined}\n     * @private\n     */\n    async _removeRequest(operation) {\n        const now = Date.now();\n        let entry;\n        switch (operation) {\n            case 'pop':\n                entry = await this._queueStore.popEntry();\n                break;\n            case 'shift':\n                entry = await this._queueStore.shiftEntry();\n                break;\n        }\n        if (entry) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Loops through each request in the queue and attempts to re-fetch it.\n     * If any request fails to re-fetch, it's put back in the same position in\n     * the queue (which registers a retry for the next sync event).\n     */\n    async replayRequests() {\n        let entry;\n        while ((entry = await this.shiftRequest())) {\n            try {\n                await fetch(entry.request.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `has been replayed in queue '${this._name}'`);\n                }\n            }\n            catch (error) {\n                await this.unshiftRequest(entry);\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new WorkboxError('queue-replay-failed', { name: this._name });\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`All requests in queue '${this.name}' have successfully ` +\n                `replayed; the queue is now empty!`);\n        }\n    }\n    /**\n     * Registers a sync event with a tag unique to this instance.\n     */\n    async registerSync() {\n        // See https://github.com/GoogleChrome/workbox/issues/2393\n        if ('sync' in self.registration && !this._forceSyncFallback) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            }\n            catch (err) {\n                // This means the registration failed for some reason, possibly due to\n                // the user disabling it.\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    /**\n     * In sync-supporting browsers, this adds a listener for the sync event.\n     * In non-sync-supporting browsers, or if _forceSyncFallback is true, this\n     * will retry the queue on service worker startup.\n     *\n     * @private\n     */\n    _addSyncListener() {\n        // See https://github.com/GoogleChrome/workbox/issues/2393\n        if ('sync' in self.registration && !this._forceSyncFallback) {\n            self.addEventListener('sync', (event) => {\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.log(`Background sync for tag '${event.tag}' ` + `has been received`);\n                    }\n                    const syncComplete = async () => {\n                        this._syncInProgress = true;\n                        let syncError;\n                        try {\n                            await this._onSync({ queue: this });\n                        }\n                        catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                // Rethrow the error. Note: the logic in the finally clause\n                                // will run before this gets rethrown.\n                                throw syncError;\n                            }\n                        }\n                        finally {\n                            // New items may have been added to the queue during the sync,\n                            // so we need to register for a new sync if that's happened...\n                            // Unless there was an error during the sync, in which\n                            // case the browser will automatically retry later, as long\n                            // as `event.lastChance` is not true.\n                            if (this._requestsAddedDuringSync &&\n                                !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Background sync replaying without background sync event`);\n            }\n            // If the browser doesn't support background sync, or the developer has\n            // opted-in to not using it, retry every time the service worker starts up\n            // as a fallback.\n            void this._onSync({ queue: this });\n        }\n    }\n    /**\n     * Returns the set of queue names. This is primarily used to reset the list\n     * of queue names in tests.\n     *\n     * @return {Set<string>}\n     *\n     * @private\n     */\n    static get _queueNames() {\n        return queueNames;\n    }\n}\nexport { Queue };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Queue } from './Queue.js';\nimport './_version.js';\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof workbox-background-sync\n */\nclass BackgroundSyncPlugin {\n    /**\n     * @param {string} name See the {@link workbox-background-sync.Queue}\n     *     documentation for parameter details.\n     * @param {Object} [options] See the\n     *     {@link workbox-background-sync.Queue} documentation for\n     *     parameter details.\n     */\n    constructor(name, options) {\n        /**\n         * @param {Object} options\n         * @param {Request} options.request\n         * @private\n         */\n        this.fetchDidFail = async ({ request }) => {\n            await this._queue.pushRequest({ request });\n        };\n        this._queue = new Queue(name, options);\n    }\n}\nexport { BackgroundSyncPlugin };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse, } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */\n    constructor({ fallbackURL, precacheController, }) {\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController =\n            precacheController || getOrCreatePrecacheController();\n    }\n}\nexport { PrecacheFallbackPlugin };\n","import { clientsClaim } from 'workbox-core';\nimport { BackgroundSyncPlugin } from 'workbox-background-sync';\nimport { registerRoute, Route } from 'workbox-routing';\nimport { NetworkOnly, NetworkFirst, CacheFirst } from 'workbox-strategies';\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response';\nimport { PrecacheFallbackPlugin, precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';\n\n// Ensure that updates to the underlying service worker take effect immediately\n// for both the current client and all other active clients.\nself.skipWaiting();\nclientsClaim();\n\nif (self.location.hostname !== 'localhost') {\n  cleanupOutdatedCaches();\n\n  precacheAndRoute(self.__WB_MANIFEST);\n\n  // Any navigation loads the precached index.html\n  const networkOnlyNavigationRoute = new Route(({ request }) => {\n    return request.mode === 'navigate';\n  }, new NetworkOnly({\n    plugins: [\n      new PrecacheFallbackPlugin({ fallbackURL: '/index.html' }),\n    ],\n  }));\n\n  registerRoute(networkOnlyNavigationRoute);\n\n  const staticAssetsRoute = new Route(({ request }) => {\n    return ['image'].includes(request.destination);\n  }, new CacheFirst({ cacheName: 'cache-static-assets' }));\n\n  registerRoute(staticAssetsRoute);\n\n  // Hashing cache names that are unique per build for cache clean up\n  function getHashedCacheName(name) {\n    return `hashed-${ _NOW_ }-${ name }`;\n  }\n\n  // Delete all hashed caches except the current one\n  async function deleteHashedCache() {\n    const cacheNames = await self.caches.keys();\n\n    const cacheNamesToDelete = cacheNames.filter(cacheName => {\n      return (\n        cacheName.startsWith('hashed-')\n          && !cacheName.startsWith(`hashed-${ _NOW_ }`)\n      );\n    });\n\n    await Promise.all(\n      cacheNamesToDelete.map(cacheName => self.caches.delete(cacheName)),\n    );\n\n    return cacheNamesToDelete;\n  }\n\n  deleteHashedCache();\n\n  const staticHashedAssetsRoute = new Route(({ request }) => {\n    return ['script', 'style'].includes(request.destination);\n  }, new CacheFirst({ cacheName: getHashedCacheName('static-hashed-assets') }));\n\n  registerRoute(staticHashedAssetsRoute);\n\n  registerRoute(\n    ({ url }) => url.pathname.includes('appconfig.json'),\n    new NetworkFirst({ cacheName: 'cache-appconfig' }),\n  );\n\n  // Caches api GET responses for the listed status codes\n  registerRoute(\n    ({ url }) => url.pathname.startsWith('/api/'),\n    new NetworkFirst({\n      cacheName: 'cache-api',\n      plugins: [\n        new CacheableResponsePlugin({\n          statuses: [0, 200, 204, 404, 410],\n        }),\n      ],\n    }),\n  );\n\n  const bgSyncPlugin = new BackgroundSyncPlugin('form-responses', {\n    maxRetentionTime: 24 * 60, // Retry for max of 24 Hours (specified in minutes)\n  });\n\n  // Retries POST requests to /api/form-responses when offline\n  registerRoute(\n    /\\/api\\/form-responses/,\n    new NetworkOnly({\n      plugins: [bgSyncPlugin],\n    }),\n    'POST',\n  );\n}\n"],"names":["fallback","code","args","msg","messageGenerator","WorkboxError","errorCode","details","message","quotaErrorCallbacks","_cacheNameDetails","_createCacheName","cacheName","value","eachCacheNameDetail","fn","key","cacheNames","userCacheName","stripParams","fullURL","ignoreParams","strippedURL","param","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","keysOptions","cacheKeys","cacheKey","strippedCacheKeyURL","supportStatus","canConstructResponseFromBodyStream","testResponse","Deferred","resolve","reject","executeQuotaErrorCallbacks","callback","getFriendlyURL","url","timeout","ms","waitUntil","event","asyncFn","returnPromise","copyResponse","response","modifier","origin","clonedResponse","modifiedResponseInit","body","clientsClaim","instanceOfAny","object","constructors","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","promise","unlisten","success","error","wrap","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","replaceTraps","wrapFunction","func","storeNames","unwrap","transformCachableValue","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","openPromise","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","method","storeName","oldTraps","DB_VERSION","DB_NAME","REQUEST_OBJECT_STORE_NAME","QUEUE_NAME_INDEX","QueueDb","entry","cursor","queueName","results","id","query","direction","oldVersion","QueueStore","firstId","serializableProperties","StorableRequest","requestData","TAG_PREFIX","MAX_RETENTION_TIME","queueNames","convertEntry","queueStoreEntry","queueEntry","Queue","forceSyncFallback","onSync","maxRetentionTime","allEntries","now","unexpiredEntries","maxRetentionTimeInMs","metadata","timestamp","operation","syncComplete","syncError","BackgroundSyncPlugin","options","defaultMethod","normalizeHandler","handler","Route","match","RegExpRoute","regExp","result","Router","responsePromise","payload","requestPromises","sameOrigin","params","route","err","catchHandler","catchErr","routes","matchResult","routeIndex","defaultRouter","getOrCreateDefaultRouter","registerRoute","capture","captureUrl","matchCallback","toRequest","input","StrategyHandler","strategy","plugin","possiblePreloadResponse","originalRequest","cb","pluginFilteredRequest","fetchResponse","responseClone","cachedResponse","effectiveRequest","multiMatchOptions","responseToCache","hasCacheUpdateCallback","oldResponse","mode","state","statefulParam","pluginsUsed","Strategy","responseDone","handlerDone","waitUntilError","CacheFirst","cacheOkAndOpaquePlugin","NetworkFirst","p","logs","promises","timeoutId","networkPromise","fetchError","NetworkOnly","timeoutPromise","CacheableResponse","config","cacheable","headerName","CacheableResponsePlugin","REVISION_SEARCH_PARAM","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","PrecacheCacheKeyPlugin","precacheController","PrecacheStrategy","integrityInManifest","integrityInRequest","noIntegrityConflict","defaultPluginIndex","cacheWillUpdatePluginCount","index","PrecacheController","plugins","fallbackToNetwork","entries","urlsToWarnAbout","cacheMode","warningMessage","installReportPlugin","integrity","updatedURLs","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","deletedURLs","getOrCreatePrecacheController","removeIgnoredSearchParams","ignoreURLParametersMatching","paramName","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","cacheNamesToDelete","cleanupOutdatedCaches","cachesDeleted","precache","precacheAndRoute","PrecacheFallbackPlugin","fallbackURL","getHashedCacheName","networkOnlyNavigationRoute","staticAssetsRoute","deleteHashedCache","staticHashedAssetsRoute","bgSyncPlugin"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55]}